{
    "name": "project",
    "doc_namespace": "doc",
    "doc_class": "doc",
    "references": [
        "doc.index"
    ],
    "data": {
        "body": "[title Building a Project]\n\nThis chapter explores the files required to launch a server. If you have an example project created with [c]moya start[/c], you can compare the settings and other files discussed here.\n\n[h1]Settings Format[/h1]\n\nThe following is en example of an file in Moya's INI format:\n\n[code ini]\n# This line is a comment, and is ignored\n\n# The next line tells Moya to extend this ini file with another.\nextends = ./common.ini\n\n# This is a section\n[section]\nkey = value\n\n# This is a named section\n[ship:moya]\n# a multi-line list (note the indentation)\ncrew = Aeryn\n    John\n    Scorpius\n[/code]\n\nMoya reads ini files line by line. If the line begins with a [c]#[/c] character, the rest of the line is ignored. A line with text enclosed in square brackets introduces a [i]section[/i]. A line with an [c]=[/c] defines a settings in the section, where the text before the [c]=[/c] is the key (name of the settings), and the text after the [c]=[/c] is the value. A value may contain multiple lines (treated as a list by Moya) if they are indented.\n\n[aside]Note that whitespace around the key and value is ignored.[/aside]\n\nSome section names may contain a single colon. Such sections are known as [i]named[/i] sections. A named section generally creates an object in Moya with the given name. In the example above, the section, [c]ship:moya[/c], would create a [c]ship[/c] called [c]moya[/c].\n\nYou may have noticed in the example INI above, there is a key / value pair at the top of the file and [i]not[/i] in a section. This is the [i]extends directive[/i] which tells Moya to first load the settings from another INI file, before merging the settings in the current file. There is no limit to the number of times an INI file may be extended, but be careful not to include the same file more than once in the chain, as this will be flagged as an error.\n\n[h1]Project Settings[/h1]\n\nThe project settings file creates the initial environment to run a server.\n\nThe convention for Moya settings files is to have a file called [c]settings.ini[/c] which contains development settings, and a file called [c]production.ini[/c] which contains settings required for a production environment (running live). Both these INI files extend [c]basesettings[/c], which contains settings common to both.\n\nWhen you run the server, you can specify which settings file to run with the [c]--ini[/c] file. For example, the following command will run the production settings:\n\n[code]\n$ moya runserver --ini production.ini\n[/code]\n\n\n[h2][console] Section[/h2]\n\nThis section configures the console (text written by the [tag]echo[/tag] tag).\n\n[setting]color = yes/no[/setting]\n\nIf [c]yes[/c] (the default) Moya will write colored output to the console. Set to [c]no[/c] for monochrome output.\n\n[setting]width = <INTEGER>[/setting]\n\nSet's the width of the console. Leave blank to auto-detect the terminal size.\n\n[setting]logger = <LOGGER>[/setting]\n\nIf not blank, Moya will re-direct all console output to a [link logging]logger[/link] (e.g. \"moya.console\"). Use this in a production environment, where you don't have a terminal.\n\n[h2][media] Section[/h2]\n\nThis section defines where [i]media[/i] (static images / css etc) should be stored and served. See [doc library#media-section] for more information on media.\n\n[setting]location = <path>[/setting]\n\nThis should be a path to the static media for the project, by convention this is typically [c]./media[/c].\n\n[setting]url = <media base url>[/setting]\n\nThis should be the base url for media, which be fully qualified (include https:// etc), or an absolute URL path. If you leave this value blank, Moya will use the [c]app[/c] setting to detect the media url.\n\n[setting]app = <app name>[/setting]\n\nIf a base URL isn't supplied ([c]url[/c] setting above), this should contain an application name. Moya will set the media url to be wherever this application is mounted. If not specified, the default will be [c]'media'[/c] so the media url will be wherever the application named [c]media[/c] is installed.\n\n[aside]If you used [b]moya start[/b] to create the project, media will be set up for you and serving on [b]/static/[/b].[aside]\n\n[h2][settings] Section[/h2]\n\nThe settings section sets project wide settings, which may be used to customize project behaviour. Here's an example of settings section:\n\n[code ini]\n[settings]\nproject_title = Sushi Finder\n[/code]\n\nValues set here are copied to a root object called [c].settings[/c] at the beginning of a request. For example, you can refer the value [c].settings.project_title[/c], which will contain the string [c]\"Sushi Finder\"[/c].\n\n[h2][project] Section[/h2]\n\nThe project section contains a few settings required to start up a project.\n\n[setting]debug = yes/no[/setting]\n\nSet to [c]yes[/c] to enable a flag in Moya code ([c].debug[/c]) which can be used to enable debug features. Set to [c]no[/c] to disable debug features.\n\n[setting]preflight = yes/no[/setting]\n\nMoya can run [link preflight]preflight checks[/link] on startup which will alert you to any potential problems via the logs. Set to [c]yes[/c] to enable preflight checks, or [c]no[/c] to disable. You should probably enable this for development, but disable in a production environment.\n\n[setting]log_signals = yes/no[/setting]\n\nIf set to [c]yes[/c], Moya will log any signal fired in the project. This is disabled by default as it can generate a lot of log messages. Enable if you are debugging signal related code.\n\n[setting]location = <path>[/setting]\n\nThis setting lets Moya know the path to the logic code that will be used to create a server. This is typically set to [c]./logic[/c], but can be any valid directory.\n\n[setting]startup = <filename>[/setting]\n\nThis setting defines the first file that Moya will run, it should be set to the name of a file within directory defined in [c]location[/c]. Typically, this will be [c]server.xml[/c] which contains a server definition.\n\n[h2][autoreload] Section[/h2]\n\nWhen developing a project, Moya can watch the project files for changes, and when it notices a file was modified, added or removed, it will rebuild the project. This means that you may edit your project without having to restart the server.\n\n[setting]enabled = yes/no[/setting]\n\nSet to [c]yes[/c] to enable auto-reload. Set to [c]no[/c] to disable auto-reload (in a production environment for example).\n\n[setting]extensions = <list of extensions>[/setting]\n\nThis should be set to a list of file extensions which should be monitored. Changes to file types not in this list will not cause a reload. This setting will typically be set to the following:\n\n[code ini]\nextensions = .xml\n             .ini\n             .py\n             .html\n[/code]\n\n[setting]location = <path>[/setting]\n\nThis section should be set to the directory to be monitored for auto-reload, typically [c]./[/c] which will including the entire project (including sub-directories).\n\n[h2][site] Section[/h2]\n\nThis section contains settings regarding the site that will be served. Moya uses this information internally, but you may access these settings during runtime, in the values [c].sys.site[/c]. See also [url #site-data]Site Data[/url].\n\n\n[setting]base_content = <element>[/setting]\n\nA reference to a base [link content]content[/link] definition. This is the content element that other content elements will be extended from, if they don't explicitly set an [c]extends[/c] attribute.\n\n[setting]timezone = <timezone>[/setting]\n\nThis setting should be set to a [url http://en.wikipedia.org/wiki/List_of_tz_database_time_zones]timezone[/url], which will be used when displaying dates to the user. An example of a timezone would be [c]US/Eastern[/c] for Eastern Standard Time, and [c]Europe/London[/c] for the time in the UK.\n\n[setting]user_timezone = yes/no[/setting]\n\nA single timezone for all visitors to your site may be enough for many sites, but if your site has users from various parts of the globe, they might appreciate dates appearing in there own timezone. If this value is set to [c]yes[/c] Moya will use the timezone associated with the user in the database. If there is no user logged in, then the timezone will default to the [c]timezone[/c] setting.\n\n[setting]append_slash = yes/no[/setting]\nIf this setting is set to [c]yes[/c], Moya will redirect to a URL ending with a forward slash ([c]/[/c]) if the current URL doesn't already end with a slash. Set to [c]no[/c] to disable this features.\n\n[aside]Moya is fairly clever at doing the [b]append_slash[/b] redirect. It won't redirect if the project can serve content on the current URL. It also won't redirect if the new URL (with slash appended) has no content associated with it.[/aside]\n\n[h2]Site Data[/h2]\n\nYou can add arbitrary data to the site section by prefixing it with [c]data-[/c]. When Moya sees such a setting, it drops the [c]data-[/c] part and stores the key and value in a dictionary in [c].site[/c]. You can then use these settings in your code to configure various site level features. Here's an example of setting site data:\n\n[code ini]\n[site]\ndata-theme = css/themes/default.ini\ndata-title = Sushi Finder\n[/code]\n\nYou could then use these values in Moya code or a template. Here's an example:\n\n[code moyatemplate]\n{% if .site.theme %}<link href=\"${.site.theme}\" rel=\"stylesheet\" />{% endif %}\n[/code]\n\n[h2][templates] Section[/h2]\n\nA project may define a templates directory which can override library templates, in order to customize the look and feel of a site.\n\n[setting]location = <relative path to settings>[/setting]\n\nSets the path to a directory containing templates. This should be [c]./templates[/c] by convention.\n\n[setting]priority = <template priority>[/setting]\n\nThis sets the priority of for the project templates. Templates with a higher priority will be selected over templates with a lower priority. The default priority for templates is [c]0[/c], so this setting should be set to something higher than that to ensure they override the templates (I suggest [c]10[/c]).\n\n[h1]Caches[/h1]\n\nA [i]cache[/i] in Moya is an object which stores temporary data. Caches are typically used to speed up your application by saving data that may otherwise have to be re-calculated. There are a few caches that are used internally by Moya, but you may also define additional caches for use in your project code.\n\nA new cache object is creates with a named section called [c]cache:[/c], which takes a name for the cache (used as an identifier in code). A cache section should contain some of the following settings:\n\n[setting]type = dict / file / memcache[/setting]\n\nMoya supports a few different methods of storing cache data, this setting defined which type to use. The available cache types are as follows:\n\n[definitions]\n\n[define dict]\nA [c]dict[/c] cache stores cache data in memory, within the same process as the server. Dict caches are fast, but non-permentant. They are best used for development, or where you can be sure the cache will not grow very large.\n[/define]\n\n[define file]\nA [c]file[/c] cache stores cache data on disk. File caches are permanent, and have the advantage that data will still be cached when the server re-starts. In theory, they are not as fast as a [c]dict[/c] cache, but modern operating systems are so good at optimizing file access that the difference may not be noticeable.\n[/define]\n\n[define memcache]\nThe [c]memcache[/c] cache type stores data in a [url http://memcached.org/]memcached[/url] server, which is an industrial strength distributed cache server. This is the best choice for a production environment -- it is very fast and can share cache data across multiple servers.\n[/define]\n\n[/definitions]\n\nA cache section may take the following settings:\n\n[setting]enabled = yes/no[/setting]\n\nA cache may be disabled by setting [c]enabled[/c] to [c]no[/c]. A disabled cache is still present, and may be used, but it will not store any data. This is a good way of testing scenarios where the memcache server is unreachable (for example). Written properly, your web application should be able to function with disabled / broken caches -- albeit at a performance cost.\n\n[setting]debug = yes/no[/setting]\n\nIf [c]debug[/c] is set to [c]yes[/c] then any operations on the cache will be logged. This is useful for debugging, but can result in a lot of log entries when enabled.\n\n[setting]location = <path>[/setting]\n\nThis is the directory where cache files will be stored. Only required for caches that write data to disk (i.e. the [c]file[/c] cache type).\n\n[setting]namespace = <identifier>[/setting]\n\nCaches may have an associated [i]namespace[/i] which keeps cache data separate if they share the same resource. For example, you may have more than one [c]file[/c] cache that shares the same location [i]if[/i] they have different namespaces. Ditto with the [i]memcache[/i] cache, which can share cache data on the same server.\n\n[setting]hosts = <memcache server IPs>[/setting]\n\nUsed by the [c]memcache[/c] cache type, this setting defines the IP address(es) of the server(s). For example, a local memcache server would require:\n\n[code]\nhosts = 127.0.0.1\n[/code]\n\n[setting]compress = yes/no[/setting]\n\nIf set to [c]yes[/c] then data will be compressed before it is stored in the cache, which will reduce the size of cache required, at a slight performance cost.\n\n[setting]compress_min = <size in bytes>[/setting]\n\nThis is the minimum required size of a value (in bytes), before compression is enabled. If a cache value is small, compression is probably not worth the effort. A default of [c]1024[/c] (1KB) is used, which should be adequate for most purposes. You can set this value to [c]0[/c] to always compress.\n\n[h1]Standard Caches[/h1]\n\nMoya uses some caches for internal data. You can configure these caches in the same with as any other.\n\n[h2][cache:templates][/h2]\n\nThe cache object named [c]templates[/c] is used to store compiled templates. When Moya loads a new template, it first has to compile it in to a form that is faster to render. This compile stage only needs to be done once per template, so Moya will cache the compiled template in [c]templates[/c] to avoid re-compiling. This is one of the reasons why pages are slower to render the first time they are requested.\n\nA file cache is probably the best type for templates. The default location created by [c]moya start[/c] is in [c]./__moyacache__[/c]. In a production environment, you would probably put it somewhere not in the project directory ([c]/tmp/__moyacache__[/c] for example).\n\n[h2][cache:fragment][/h2]\n\nThe [c]fragment[/c] cache stores pieces of html (generated from templates) that don't change often and may be expensive to generate. In a production environment, [c]memcache[/c] or [c]file[/c] is the best type for this cache object. Stick to [c]dict[/c] for development.\n\n[h1]Application Settings[/h1]\n\nIn addition to site-wide settings, you can also modify settings for individual applications installed in your project. These override the default settings set by the library itself. To modify application settings, add a named section called [c]settings:[/c], which takes the name of application you wish to configure. For example, the following sets values for the fictitious [c]sushifinder[/c] application:\n\n[code ini]\n[settings:sushifinder]\nopen_for_business = yes\ncurrencies = USD\n             GBP\n             BTC\n[/code]\n\nYou can use the [c]settings[/c] subcommand to review settings. For example, the following command line will list the default settings for the [c]moya.static[/c] library (assuming it is installed in your project):\n\n[code]\n$ moya settings moya.static\n[/code]\n\nYou can also use this command to show you the settings configured for an application. For example, if the [c]moya.static[/c] has been installed as an application called [c]static[/c], then you can review its settings with the following:\n\n[code]\n$ moya settings static\n[/code]\n\nAnd if you want to see all settings for both libraries and applications installed in a project, you can use the following:\n\n[code]\n$ moya settings\n[/code]\n\n[h2]Customizing Applications[/h2]\n\nMoya selects some sensible defaults when installing application, but occasionally you may want to customize some of these internal settings. To customize an application, add a named section called [c]application[/c] with the name of the application you would like to customize. The following is an example of a section to customize an application:\n\n[code ini]\n[application:help_pages]\ntemplates_directory = /custom_help_pages/\ndata_directory = /custom_data/\n[/code]\n\nNote, that if you don't want to modify any of these settings, you may omit the app section entirely.\n\n[setting]templates_directory = <path>[/setting]\n\nThis sets the root directory for templates in the [c]templates[/c] filesystem. This is usually the library's [i]long name[/i], but you can set any directory here. The most common use for this is so that you can have have custom templates for each application, even if they share the same library.\n\n[setting]data_directory = <path>[/setting]\n\nSimilar to the [c]templates_directory[/c], this setting defines the root directory (in the [c]data[/c] filesystem) for the application's data files. The default is to use the library's long name. This setting is typically used if you have more than application from a single library, and you want to provide different data files to each application.\n\n[h1]Supporting Multiple Sites[/h1]\n\nIt is not uncommon for a web application to need to respond to requests from multiple domains, often with slight differences in the content or look and feel. You can implement this in Moya with a [i]custom site definition[/i], which overrides any of the settings present in the [raw][site][/raw] section.\n\nTo define a custom site, add a named section that starts with [c]site:[/c] followed by a domain (or IP) you want to customize. The domain may also contain a wildcard character ([c]*[/c]) which will match a partial domain. If the domain of the request matches the domain in the site definition then its settings will override the defaults in [raw][site][/raw].\n\nHere's an example of a site definition for a subdomain:\n\n[code ini]\n[site:admin.example.org]\ndata-admin = yes\n[/code]\n\nThis will match the exact domain, [c]admin.example.org[/c]. It will also set the value [c].site.admin[/c] to [c]\"yes\"[/c].\n\nHere's an example of a site section that matches [i]all[/i] [i]subdomains[/i] of [c]example.org[/c]:\n\n[code ini]\n[site:*.example.org]\n[/code]\n\nThis will match [c]foo.example.org[/c], or any domain that ends with [c].example.org[/c]. It won't match [c]example.org[/c] or any other domain.\n\nYou can store the part of the domain that matches the wildcard with the following syntax:\n\n[code ini]\n[site:{subdomain}.example.org]\n[/code]\n\nThis matches any subdomain of [c]example.org[/c] as before, but also save the value [c]subdomain[/c] in the site data. So if the request comes from [c]gromits.example.org[/c], then the value of [c].site.subdomain[/c] will be [c]\"gromits\"[/c].\n\nThe above code will match only a single component (separated by a period) of the subdomain. so [c]widgets.gromits.example.org[/c] will [i]not[/i] match. If you want to match anything, including the period, then you can use the following syntax:\n\n[code ini]\n[site:{*subdomain}.example.org]\n[/code]\n\nThe asterisk means 'match anything'. For the above site definition, [c]widgets.gromits.example.org[/c] [i]will[/i] match, and the value of [c].site.subdomain[/c] will be [c]widgets.gromit[/c].\n\nA single site definition may also match multiple domains, by seprating the domains (or wildcards) with a comma. For example, the following will match the IP [c]127.0.0.1[/c] [i]and[/i] the domain [c]localhost[/c].\n\n[code ini]\n[site:127.0.0.1,localhost]\n[/code]\n\nMoya checks each site definition in the order they appear in the settings file, until a match is found. So put the domains you want to match first at the beginning of your settings. If no settings definitions match then Moya will return a 404 (not found) response for the request. If you want Moya to serve a response to all requests, add a [i]catch all[/i] site definition to the end of your sites. Here's how to use a wildcard to match any domain:\n\n[code ini]\n[site:*]\n[/code]\n\n[h1]Mailservers[/h1]\n\nThis section defines the mail ([url http://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol]smtp[/url]) servers which will be used to send email in the project. Most projects will only require a single mail server, but it is possible to specify more than one. To configure a mail server, add a named section called [c]smtp[/c], with a short name to be used as an identifier. Here's an example of a typical smtp section which assumes one server running on the same host as the project:\n\n[code ini]\n[smtp:default]\nhost = 127.0.0.1\ndefault = yes\n[/code]\n\nYou can review the mail servers in a project with the following command:\n\n[code]\n$ moya email list\n[/code]\n\nYou can check the mail server settings with the following command:\n\n[code]\n$ moya email check\n[/code]\n\nThis will attempt to connect to each server, and report any errors. You can also send a test email with the following command:\n\n[code]\n$ moya email send\n[/code]\n\n[aside]If the above commands don't report any errors, you can be sure that the smtp settings are correct. Unfortunately, this is no guarantee the email will reach its destination, as there could be other issues preventing email delivery.[/aside]\n\nAn smtp section, takes the following settings:\n\n[setting]host = <mail domain / ip>[/setting]\n\nSets the mail server url or IP. Use [c]127.0.0.1[/c] for a local server.\n\n[setting]port = <port number>[/setting]\n\nSet the port number of the email server (default is 25).\n\n[setting]username = <mail server username>[/setting]\n\nSets the username for the mail server, if it required authentication.\n\n[setting]password = <mail server password>[/setting]\n\nSets the password for the mail server, if it requires authentication.\n\n[setting]default = <yes / no>[/setting]\n\nIf [c]yes[/c], this mail server will be the [i]default[/i], i.e. if you don't specify the mail server to use when sending a mail, Moya will use this server. If you don't set a server as default, Moya will make the first server in settings the default.\n\n\n[h1]Filesystems[/h1]\n\nMoya code may only access files (other than its own code) if they are within a [i]filesystem[/i]. Moya creates a few filesystems by default, such as a filesystem for templates, and static media, but you may also define your own. Creating a filesystem is necessary if you want to statically serve additional files, write files (for uploads) or read data from your Moya code.\n\nYou can list the filesystems configured for your project with the following command:\n\n[code]\n$ moya fs\n[/code]\n\nThe above command will display a table of all filesystems and their location. You can inspect an individual filesystem with its name. For example, the following command will show you information regarding template locations:\n\n[code]\n$ moya fs templates\n[/code]\n\nThe templates filesystem is a [i]MultiFS[/i] filesystem, which merges several directories in to a single filesystem. You can see information regarding any other filesystem in this way. You can also see the directory structure of a filesystem with the following command line:\n\n[code]\n$ moya fs templates --tree\n[/code]\n\nThere are other switches in the [c]fs[/c] sub-command for managine files in Moya filesystems. See the command help ([c]moya fs --help[/c]) for the details.\n\nYou may create a filesystem with a named section called [c]fs[/c], which takes an identifier to refer to the filesystem in code. Here's an example that creates an [c]uploads[/c] filesystem:\n\n[code ini]\n[fs:uploads]\nlocation = ./uploads\n[/code]\n\nCurrently, only one setting is required to create a filesystem:\n\n[setting]location = <path>[/setting]\n\nThis setting should be the directory that should be exposed. If it is relative, then the path will be assumed to be relative to the project root.\n\n[h1]Settings Interface[/h1]\n\nThere are two places you can access settings when handling a request in a Moya project; [c].settings[/c] which contains project-wide settings, and [c]app.settings[/c] which contains individual settings for an application. Both settings objects are essentially a dictionary containing strings, but Moya adds an additional attributes to interpret those strings.\n\nYou can treat a setting as a boolean with the [c].bool[/c] attribute, which will be set to True if the value is [c]yes[/c]. For example, in the following code, the condition will be True only if the [c]open_for_businbess[/c] application setting is set to [c]yes[/c]. The [c].bool[/c] is important because otherwise any non-empty string would be considered True in a boolean expression.\n\n[code xml]\n<if test=\"app.settings.sushifinder.open_for_business.bool\">\n    <echo>You can haz Sushi</echo>\n</if>\n[/code]\n\nYou can also convert a setting in to a list with the [c].list[/c] attribute.\n\n[code xml]\n<for src=\"app.settings.sushifinder.currencies.list\" dst=\"currency\">\n    <echo>You can buy sushi in with ${currency}</echo>\n</for>\n[/code]\n\nYou may also use the attributes [c].int[/c] which returns an integer version of the setting, and [c].float[/c] which returns the string as a floating point number. If the setting isn't a valid integer or float, then a value of [c]None[/c] will be returned.",
        "name": "project",
        "docmap": [
            [
                1,
                "Settings Format"
            ],
            [
                1,
                "Project Settings"
            ],
            [
                2,
                "[console] Section"
            ],
            [
                2,
                "[media] Section"
            ],
            [
                2,
                "[settings] Section"
            ],
            [
                2,
                "[project] Section"
            ],
            [
                2,
                "[autoreload] Section"
            ],
            [
                2,
                "[site] Section"
            ],
            [
                2,
                "Site Data"
            ],
            [
                2,
                "[templates] Section"
            ],
            [
                1,
                "Caches"
            ],
            [
                1,
                "Standard Caches"
            ],
            [
                2,
                "[cache:templates]"
            ],
            [
                2,
                "[cache:fragment]"
            ],
            [
                1,
                "Application Settings"
            ],
            [
                2,
                "Customizing Applications"
            ],
            [
                1,
                "Supporting Multiple Sites"
            ],
            [
                1,
                "Mailservers"
            ],
            [
                1,
                "Filesystems"
            ],
            [
                1,
                "Settings Interface"
            ]
        ],
        "title": "Building a Project"
    },
    "id": "doc.project"
}