{
    "name": "library",
    "doc_namespace": "doc",
    "doc_class": "doc",
    "references": [
        "doc.index"
    ],
    "data": {
        "body": "[title Creating a Library]\n\nIn Moya, a [i]library[/i], is a bundle of files for handling a particular component of your website. All functionality for handing URLs is contained within a library, whether unique to your project or something you would like to distribute. This chapter covers how to create a new library.\n\n[h1]Starting a Library[/h1]\n\nYou can use the [c]moya start library[/c] command to create a library within your project. This will create a fully functioning library which you can use as a starting point.\n\nHere's how you might create a new library called \"Sushi Finder\":\n\n[code]\n$ moya start library --title \"Sushi Finder\" -a\n[/code]\n\nAlternatively, you can create the directory and files manually. This chapter will describe the structure and contents of a library.\n\n[h1]Library Contents[/h1]\n\nBy convention a library directory should be named after the [i]long name[/i] of the library, so the directory name won't conflict with a library from another organization. An example long name would be [c]acme.shop[/c]. As long as no other organization uses the name [c]acme[/c], there is no risk of creating a library name used by someone else.\n\n[aside]You can [i]reserve[/i] organization names on [url http://packages.moyaproject.com]packages.moyaproject.com[/url].[/aside]\n\nImmediately inside the project directory should be the following files:\n\n[definitions]\n[define __init__.py]Required if you plan to distribute your library as a Python module.[/define]\n[define lib.ini]Required for all libraries, this INI file contains information about the library and the files / directories it contains.[/define]\n[/definitions]\n\n\nA library will contain a number of directories that Moya will read from, depending on the features enabled in [c]lib.ini[/c]. The next section describes the contents of [c]lib.ini[/c].\n\n[h1]Library Settings[/h1]\n\nLike the main project, a library is initialized form an INI file which defines a few settings and tells Moya what files to load. This settings file should be called [c]lib.ini[/c]. This INI file may define the following sections:\n\n[h2][author] Section[/h2]\n\nThe author section contains information about the library and author, which is used when distributing the library. Here's an example of an author section:\n\n[code ini]\n[author]\nname = Mr T Author\nemail = author@example.org\norganization = Example Inc\nurl = http://example.org\n[/code]\n\n[setting]name = <author's name>[/setting]\n\nThe name of the author or -- if you prefer -- the organization.\n\n[setting]email = <email address>[/setting]\n\nA contact email the library author. You can leave this blank if you wish.\n\n[setting]organization = <organization name>[/setting]\n\nThe author's [i]organization[/i], i.e. the company you work for or some other group you belong to. You can leave this blank if you wish.\n\n[setting]url = <homepage URL>[/setting]\n\nThis should be a URL with information regarding the author; which could be an homepage, blog, company website etc. You may leave this blank if you wish.\n\n[h2][lib] Section[/h2]\n\nThis section contains information Moya needs to read the library's code. All libraries must contain a [raw][lib][/raw] section. The following is en example of a [raw]lib[/raw] section:\n\n[code ini]\n[lib]\nlocation = ./logic\ntitle = Sushi Finder\nurl = http://www.example.org\nnamespace = http://moyaproject.com/sushifinder\nlongname = moyaproject.sushifinder\nversion = 0.1.0-dev\n[/code]\n\n[setting]location = <path>[/setting]\n\nThis should be a relative path to a directory in the library which contains Moya code. This should be [c]./logic[/c] according to convention, but could be another directory. When Moya [i]imports[/i] the library it will read all the xml files in this directory, and sub-directories.\n\nNote that the names of the xml files are irrelevant as far as Moya is concerned, but should probably reflect what they contain. The [c]moya start library[/c] command will create a few example files, but the names are only a suggestion.\n\n[setting]title = <project title>[/setting]\n\nThis is the human readable title of the project. For example, \"Sushi Finder\".\n\n[setting]url = <library homepage>[/setting]\n\nThis setting should be the URL for the library, i.e. documentation. Leave blank if the library has no URL.\n\n[setting]namespace = <xml namespace>[/setting]\n\nThis should be an XML namespace which will be used for any tags defined in the library. If your library doesn't define any tags, you may leave this blank.\n\n[setting]name = <library's long name>[/setting]\n\nThis should be the library long name (a name used to identify the library in code). A library long name consists of lower-case characters with no spaces, separated by periods ([c].[/c]). The first token should identify the organization, other tokens should identify the library. Library long names should be globally unique, so try and pick a long name that isn't likely to clash with a library from another author.\n\n[setting]version = <library version>[/setting]\n\nLibraries should be tagged with a version number in [url http://semver.org/]Semantic Versioning[/url] format. Essentially this consists of MAJOR.MINOR.PATCH. Start at 0.1.0 for a first pre-release version, then increment PATCH when you make backwards-compatible fixes, increment MINOR when you add new functionality, and increment MAJOR when there is a new version.\n\nA MAJOR value of 0 is for initial development. When you are ready to distribute your library, reset the version to 1.0.0. You can also add -dev to indicate a version in development. It is a good idea to bump your version number immediately after publishing the library and add -dev. Drop the -dev suffix when you publish the next version.\n\n[h2][py] Section[/h2]\n\nMoya can be [i]extended[/i] with Python code that defines new tags and adds functionality.\n\n[setting]location = <path>[/setting]\n\nThis setting should be a relative path to a directory containing Python (.py) files. By convention, this should be [c]./py[/c].\n\n[h2][settings] Section[/h2]\n\nThis section defines the initial settings for the library. These can be overridden in the project settings once installed. There are no particular requirements for the setting, you may define as many as you need to configure an application with the library. As a guideline though, it is recommended to chose sensible defaults so that a library may be installed with little or no configuration.\n\n[h2][templates] Section[/h2]\n\nThis section initializes templates used in the library. This section isn't required if the library doesn't have any templates.\n\n[setting]location = <path to templates>[/setting]\n\nThis setting should be a relative path to template files. By convention, this setting should be [c]./templates[/c].\n\n[setting]priority = <integer priority>[/setting]\n\nThis setting defines the template directory [i]priority[/i] which is used to resolve conflicting template paths. Moya will select the template with the highest priority. The priority defaults to 0 if this setting isn't present.\n\nThe template priority may be overridden when the library is imported (see [tag]import[/tag]).\n\nGenerally this setting should be left as the default, as most libraries contain templates for their own use that will not conflict with other libraries. Set it to 10 if the library was designed to replace template in another library.\n\n[h2][media] Section[/h2]\n\nMoya libraries may bundle [i]media[/i] files (images, CSS, Javascript etc.) with the code, which will be served statically. To add media to your library add a named section, called [c]media:[/c] and give it a name to be used as an identifier. Most libraries will only have one media directory, and the convention is to name it simply [c]'media'[/c], so the section will be [c][media:media][/c].\n\nThe media section takes one setting, [c]location[/c], which should be a relative path to the directory containing the media. By convention, this will be [c]./media[/c]. For example:\n\n[code ini]\n[media:media]\nlocation = ./media\n[/code]\n\nWhen the library is installed, Moya adds media directories to a virtual filesytem called [c]media[/c], under a sub-directory called [c]<application name>-<media name>[/c].\n\nLet's work through an example to illustrate this. Assume we have a library called [c]moya.sushifinder[/c], with a media section as follows:\n\n[code ini]\n[media:media]\nlocation = ./media\n[/code]\n\nAnd the library contains the following files (some directories omitted for brevity):\n\n[code]\nmoyaproject.sushifinder/\n|-- lib.ini\n|-- logic\n|   |-- views.xml\n|   `-- widgets.xml\n`-- media\n    |-- css\n    |   `-- sushi.css\n    `-- images\n        `-- logo.png\n[/code]\n\nWhen we install this library with the application name of [c]sushi[/c], Moya adds a directory to the [c]media[/c] filesystem called [c]sushi-media[/c]. If we were to list the contents of the [c]media[/c] filesystem, with [c]moya fs media --tree[/c], we would see something like the following (along with media from other libraries):\n\n[code]\n|-- sushi-media\n|   |-- css\n|   |   `-- sushi.css\n|   `-- images\n|       `-- logo.png\n[/code]\n\nYou can serve this media filesystem with the [c]moya.static[/c] library. To use it, add the following to your [tag]server[/tag]:\n\n[code xml]\n<import py=\"moya.libs.static\" />\n[/code]\n\nThen install it with something like the following:\n\n[code xml]\n<install name=\"media\" lib=\"moya.static\" mount=\"/static/\" />\n[/code]\n\nFinally, add the following section to your project settings:\n\n[code ini]\n[settings:media]\nfs = media\ndirlist = yes\n[/code]\n\nYour project should now be serving media from all applications. If you visit the [c]/static/[/c] url, you should see a directory listing of the media files you are serving.\n\n[aside]If you used the [b]moya start project[/b] command to create your initial project, then the media system will have already been set up.[/aside]\n\nSee [link library#overriding-media]Overriding Media[/link] for ways of customizing media for a project.\n\n[h2][data] Section[/h2]\n\nThis section defines additional data files (json, text etc) that may be read from your project code. Moya combines any directories defined in this section, in to a single filesystem called [c]\"data\"[/c]. You can see what data files are exposed by Moya with the following command line:\n\n[code]$ moya fs data --tree[/code]\n\nYou can read a data file with the [tag]read-data[/tag] tag, which supports a variety of standard formats.\n\nData follows the same convention as templates; the data files should be within a directory named after the library. This allows a library to over-ride the data files from another library, and is another way of customizing behavior.\n\n[setting]location = <path to data>[/setting]\n\nThis setting should be a relative path to a directory containing data files by convention this should be [c]./data[/c]\n\n[setting]priority = <integer priority>[/setting]\n\nThe priority is used to resolve which path should be used when there are conflicting paths within data directories. The library with the highest priority is used. This setting may be blank, to use a default priority of 0.\n\n[h2][documentation] Section[/h2]\n\nThis section defines documentation for the library. Moya can extract tag documentation automatically for your library, and you can add supplementary documentation in a dialog of bbcode.\n\n[setting]location = <path to documentation>[/setting]\n\nThis value should be a relative path to the documentation. By convention, documentation is stored in [c]./docs[/c].\n\n[h2][tests] Section[/h2]\n\nThis section defines tests for your library. Tests consists of Moya code that checks the code in your library is working as expected. Well written tests ensure that you can catch bugs early, before they make it in to production.\n\n[setting]location = <path to tests>[/setting]\n\nThis setting should be a relative path to the directory containing tests, by convention this is [c]./tests[/c].\n\n[setting]projects = <path to projects directory>[/setting]\n\nThis setting should be a relative path to a directory containing projects. Your tests can load these projects on the fly and test that they are generating the expected responses.\n\n[setting]import = <list of imports>[/setting]\n\nThis setting should be a list of libraries to import when testing (i.e. dependencies of the library). An entry in this list can be a path, or a Python module if a line is prefixes with [c]py:[/c].\n\n[h2][translations] Section[/h2]\n\nMoya supports internationalization of text in to any language. If you intend to supply text translations for your library, then add this section.\n\n[setting]location = <path to translations>[/setting]\n\nThis should be a relative path to the directory containing [i]message catalogs[/i]. By convention, this should be [c]./translations[/c].\n\n[setting]default_language = <language code>[/setting]\n\nThis setting defines the language used in the library. Moya needs this information when extracting text. Typically this will be [c]'en'[/c] for English, but could be any language code.\n\n[setting]languages = <comma separated list of language codes>[/setting]\n\nThis should be a comma separated list of language codes, for each of the languages the library contains translations for. This language doesn't have to include the default language, which is implied. For example, a value of [c]fr, es[/c] would indicate the library supports French and Spanish in addition to the default language.\n\n[h1]Overriding Media[/h1]\n\nMoya's media system allows you to either [i]replace[/i] individual files in the media directories, or completely swap out a media directory for another -- depending on the level of customization you would like.\n\n[aside]Note that when you [i]replace[/i] media files or directories, no files are copied or removed -- all that changes is Moya's [i]view[/i] of the files.[/aside]\n\nTo override individual files, first add the following section to your project settings:\n\n[code ini]\n[media]\nlocation = ./static\n[/code]\n\nThis combines the [c]/static[/c] directory in your project with the files in media, so that any files in this directory take priority over the files stored in library directries. For example, lets say we want to completely replace the image [c]logo.png[/c] in the Sushi Finder library with our own logo. To do this, we can add the custom [c]logo.png[/c] to the project's static directory. So [c]./static[/c] will look something like this:\n\n[code]\n`-- static\n    `-- sushi-media\n        `-- images\n            `-- logo.png\n[/code]\n\nNow when the browser requests [c]/static/sushi-sushimedia/images/logo.png[/c] it will receive the version stored in the project directory, rather than the version in the library.\n\nThe second way to customize media is to replace a media directory entirely. This can be done by creating a filesystem called [c]<app name>_<media name>[/c]. In the Sushi Finder application, it would be called [c]sushi_media[/c]. The contents of this filesystem will be used in preference to the media contained in the library.\n\n[aside]Note that the [i]name[/i] of the filesystem contains an underscore (_), and [i]not[/i] a hyphen (-), this is so you can use the filesystem name in an expression [i]without[/i] the hyphen being interpreted as a minus sign. A hyphen is used as the directory name, because hyphens are prefered over underscores in URLs.[/aside]\n\nThe following section, when added to project settings, creates a media directory that completely replaces the media from then Sushi Finder library:\n\n[code ini]\n[fs:sushi_media]\nlocation = ./replace_sushimedia\n[/code]\n\nNow, when you request any file under [c]/static/sushi-sushimedia/[/c] it will look for it in the [c]./replace_sushimedia[/c] directory in the project.\n\nNote that if you use this method you will probably have to replace or copy all the media files the library uses. As a starting point you can copy a library's media with the following:\n\n[code]\n$ moya fs sushi_media --copy ./replace_sushimedia\n[/code]\n\nThis copies all the media files from the sushi library to the [c]replace_sushimedia[/c] directory. You can now modify any files you wish to customize.\n",
        "name": "library",
        "docmap": [
            [
                1,
                "Starting a Library"
            ],
            [
                1,
                "Library Contents"
            ],
            [
                1,
                "Library Settings"
            ],
            [
                2,
                "[author] Section"
            ],
            [
                2,
                "[lib] Section"
            ],
            [
                2,
                "[py] Section"
            ],
            [
                2,
                "[settings] Section"
            ],
            [
                2,
                "[templates] Section"
            ],
            [
                2,
                "[media] Section"
            ],
            [
                2,
                "[data] Section"
            ],
            [
                2,
                "[documentation] Section"
            ],
            [
                2,
                "[tests] Section"
            ],
            [
                2,
                "[translations] Section"
            ],
            [
                1,
                "Overriding Media"
            ]
        ],
        "title": "Creating a Library"
    },
    "id": "doc.library"
}