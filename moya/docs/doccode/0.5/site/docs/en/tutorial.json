{
    "name": "tutorial",
    "doc_namespace": "doc",
    "doc_class": "tutorial",
    "references": [
        "doc.index"
    ],
    "data": {
        "body": "[class tutorial]\n[title Moya Tutorial]\n\nThis tutorial will cover the building of a fully functional website with Moya.\n\nYou can work through the tutorial without reading the rest of the documentation. Much of the detail will be glossed over for the sake of brevity, but will contain links to the [link index]Reference[/link] documentation if you want the details.\n\nThe website we are going to build is a [i]microblogging[/i] service, not unlike [url http://twitter.com]Twitter[/url]. We're not going to attempt to replicate [i]everything[/i] Twitter does (the Twitter developers have nothing to fear), just a single-user timeline.\n\n[h1]Prerequisites[/h1]\n\nBefore we start, you will need to first [link installation]install Moya[/link] if you haven't already. And as a bare minimum you will need to be familiar with using the command line, and have a text editor for editing code. It will also help if you are familiar with basic [url http://en.wikipedia.org/wiki/HTML]HTML[/url].\n\n[h1]Blether[/h1]\n\nThe site we are going to build will be called [i]Blether[/i], which is a Scottish word, meaning [i]to chat[/i]. We're aiming for a single [i]timeline[/i] of 140 character messages -- or [i]blethers[/i].\n\n[aside]Ever wondered why Twitter has a limit of 140 characters? It's because that's the maximum number of characters you can send in a mobile text message. But who tweets by text these days?[/aside]\n\n[h1]Starting the Project[/h1]\n\nWe're going to use the Moya command line application to create a project framework for us. This will give us a starting point for our project.\n\nRun the following command from the command line to create a basic project:\n\n[code]\n$ moya start project --title Blether -a\n[/code]\n\nThe [c]--title[/c] option sets the title of the project. The [c]-a[/c] switch tells Moya to accept the defaults where possible. When you run this command, Moya will ask you for a few details it needs to build the project. When it finishes, you should see confirmation that the project files were written successfully.\n\n[aside]If you don't want to re-enter these details at the command line, you can save them to your [link start#moyarc]moyarc[/link] file.[/aside]\n\nThe default project build by [c]moya start[/c] contains a simple content management system, comments, a blog, a contact page, a feedback form and an [i]admin[/i] site.\n\nBefore we can have a look at our site, we must first create the database, which will store the site's dynamic data (users, posts, comments etc). Navigate to the [c]blether[/c] directory and run the following command:\n\n[code]\n$ moya db sync\n[/code]\n\nYou should see confirmation that the database has been synced (tables created). The site will actually be usable at this point, but we should first run the following command to create an initial user and set up some related objects in the database. Enter the following at the command line:\n\n[code]\n$ moya auth#cmd.init\n[/code]\n\nThis runs an interactive [link commands]command[/link] from the [link auth]Moya Auth[/link] library, it will ask you for the name of the [i]superuser[/i] account. You may leave this as the default of [c]superuser[/c], or enter a username of your own. Moya will also ask you for a password. Since the site is not accessible on the internet just yet, feel free to enter a memorable password here, such as 'password'. Moya will also ask you for an email address -- you may leave this blank if you wish; if the site were live it is this address that would be used to send you mail.\n\n[h1]Running a Server[/h1]\n\nYou may now [i]serve[/i] the site with the following command:\n\n[code]\n$ moya runserver\n[/code]\n\nYou should see a few pages of log messages followed by a message that lets you know that the development server is running. You can now open a browser on the same machine and navigate to [url http://127.0.0.1:8000]http://127.0.0.1:8000[/url].\n\n[aside]You may not have seen a URL like [b]http://127.0.0.1:8000[/b] before. When you enter [b]moya runserver[/b] on the command line, Moya runs a webserver on your computer. The [b]127.0.0.1[/b] part is a special [url http://en.wikipedia.org/wiki/IP_Address]IP address[/url] which connects to your local machine. The [b]:8000[/b] part of the URL indicates that the [i]port[/i] is 8000. Webservers typically use port 80, but Moya runs the development server on port 8000 to avoid conflict.[/aside]\n\nThe first page you will see on your site is a confirmation page that Moya is serving content. You will see a line in the console for every file the browser requests. There will be an entry for the page you are viewing, and other files it references, such as images, [url http://en.wikipedia.org/wiki/JavaScript]JavaScript[/url] and [url http://en.wikipedia.org/wiki/CSS]CSS[/url].\n\nFeel free to explore the default site. You can log in with your superuser account by clicking on the [i]Log in[/i] link at the top right of the page. Be sure to have a look at the Admin site ([c]/admin/[/c]) which will let you manage the contents of your database.\n\n[h2]Server XML[/h2]\n\nWhen you run the server, Moya runs [link moyacode]Moya Code[/link], which is executable code stored in XML. The first such file Moya runs is [c]server.xml[/c] which tells Moya which [i]libraries[/i] the project will use. You will find a [c]server.xml[/c] for your project in the [c]logic[/c] directory. It should look something like the following:\n\n[code xml]\n<moya xmlns=\"http://moyaproject.com\">\n\n    <!-- Initialize a server -->\n    <server docname=\"main\">\n\n        <log>Starting up!</log>\n\n        <!-- Import libraries for use in your project -->\n        <import py=\"moya.libs.debug\" if=\".debug\"/>\n        <import py=\"moya.libs.auth\"/>\n        <import py=\"moya.libs.session\"/>\n        <import py=\"moya.libs.signup\"/>\n        <import py=\"moya.libs.admin\"/>\n        <import py=\"moya.libs.static\"/>\n        <import py=\"moya.libs.favicon\"/>\n        <import py=\"moya.libs.welcome\"/>\n        <import py=\"moya.libs.links\"/>\n        <import py=\"moya.libs.bootstrap\"/>\n        <import py=\"moya.libs.forms\"/>\n        <import py=\"moya.libs.widgets\"/>\n        <import py=\"moya.libs.comments\"/>\n        <import py=\"moya.libs.pages\"/>\n        <import py=\"moya.libs.blog\"/>\n        <import py=\"moya.libs.feedback\"/>\n        <import py=\"moya.libs.jsonrpc\"/>\n        <import py=\"moya.libs.wysihtml5\"/>\n        <import py=\"moya.libs.recaptcha\"/>\n\n        <!-- The 'site' library, for non reusable content -->\n        <import location=\"./site\" priority=\"10\"/>\n        <install name=\"site\" lib=\"site.blether\" mount=\"/\"/>\n\n        <!-- Install applications (instances of a library) -->\n        <install name=\"forms\" lib=\"moya.forms\"/>\n        <install name=\"widgets\" lib=\"moya.widgets\"/>\n        <install name=\"auth\" lib=\"moya.auth\" mount=\"/auth/\"/>\n        <mount app=\"auth\" mountpoint=\"middleware\" url=\"/\"/>\n        <install name=\"session\" lib=\"moya.session\" mount=\"/\"/>\n        <install name=\"signup\" lib=\"moya.signup\" mount=\"/signup/\"/>\n        <install name=\"admin\" lib=\"moya.admin\" mount=\"/admin/\"/>\n        <install name=\"media\" lib=\"moya.static\" mount=\"/static/\"/>\n        <install name=\"debug\" lib=\"moya.debug\" mount=\"/debug/\" if=\".debug\"/>\n        <install name=\"bootstrap\" lib=\"moya.twitter.bootstrap\"/>\n        <install name=\"welcome\" lib=\"moya.welcome\" mount=\"/\"/>\n        <install name=\"links\" lib=\"moya.links\"/>\n        <install name=\"favicon\" lib=\"moya.favicon\" mount=\"/\"/>\n        <install name=\"comments\" lib=\"moya.comments\" mount=\"/comments/\"/>\n        <install name=\"pages\" lib=\"moya.pages\" mount=\"/\"/>\n        <install name=\"blog\" lib=\"moya.blog\" mount=\"/blog/\"/>\n        <install name=\"feedback\" lib=\"moya.feedback\" mount=\"/feedback/\"/>\n        <install name=\"jsonrpc\" lib=\"moya.jsonrpc\"/>\n        <install name=\"wysihtml5\" lib=\"moya.wysihtml5\"/>\n        <install name=\"recaptcha\" lib=\"moya.google.recaptcha\"/>\n\n    </server>\n\n</moya>\n[/code]\n\nThe [c]server.xml[/c] above was created when we ran [c]moya start project[/c]. Since we accepted all the defaults, there is a good amount of libraries already set up. You may add and remove features by editing this file, but for the purposes of this tutorial we will stick with the auto-generated code.\n\n[h1]Creating the Library[/h1]\n\nAll functionality in Moya is contained within a [i]library[/i], which is a bundle of files (code, templates, CSS, Javascript, images etc.) responsible for handling URLs, or implementing features. Let's create a library for our Blether project. In the project directory, enter the following command:\n\n[code]\n$ moya start library --title Blether --mount / -a\n[/code]\n\nThe [c]--title[/c] option tells Moya the title of the library, [c]--mount /[/c] tells Moya to [i]mount[/i] it on the root URL, and [c]-a[/c] accepts all defaults. When you run this command, Moya creates the files and directories for a working library and modifies [c]server.xml[/c].\n\nIf you open up [c]server.xml[/c], you should see that the start command has added two lines inside the [tag]server[/tag] tag :\n\n[code xml]\n<!--Added by 'moya start library'-->\n<import location=\"./local/moyaproject.blether\"/>\n<install name=\"blether\" lib=\"moyaproject.blether\" mount=\"/\"/>\n[/code]\n\n[alert NOTE]Some details may be different if you used your own Organization name.[/alert]\n\nThese two lines ensure that the library is loaded and can handle URLs.\n\nIf you run the server now, you will find that Moya is [i]not[/i] yet serving our Blether library on [c]/[/c]. This is because the default project mounts a library which shows a simple page of welcome text on [c]/[/c]. Comment out (or remove) the two lines in your [c]server.xml[/c] that referencing the [i]welcome[/i] library.\n\nNow if you navigate to [url http://127.0.0.1:8000/]http://127.0.0.1:8000/[/url] you should find a simple example page to demonstrate the new library is working. Next, we will replace this with microblogging service.\n\n[aside]You may have noticed that there are other libraries mounted on [b]/[/b]. This is because a library can decide whether it will handle a particular URL under its mount point. If a library decides [i]not[/i] to handle a URL, then Moya will try the next library in turn, until it the URL is handled.[/aside]\n\n[h1]Editing the Library[/h1]\n\nThe [c]start library[/c] command has written the library files to a directory called [c]local[/c] (in the project directory). This directory will contain the libraries you have authored yourself. There's also a [c]external[/c] directory which will contain third party libraries.\n\nThe name of the library will be in the form of [c]<your organization>.blether[/c] where [c]<your organization>[/c] is replaced with your answer to the organization question in the start command. The files for the Blether library will be contained in a directory of the same name. For example in my project the new library would be in [c]local/moyaproject.blether[/c] -- in your project the [c]moyaproject[/c] would be different.\n\nIf you navigate to the Blether library, you should see it contains the following files:\n\n[code]\n.\n|-- __init__.py\n|-- lib.ini\n|-- locale\n|   `-- readme.txt\n|-- logic\n|   |-- content.xml\n|   |-- forms.xml\n|   |-- models.xml\n|   |-- mountpoints.xml\n|   |-- readme.txt\n|   |-- signals.xml\n|   |-- tags.xml\n|   |-- views.xml\n|   `-- widgets.xml\n|-- media\n|   `-- readme.txt\n`-- templates\n    `-- moyaproject.blether\n        |-- base.html\n        `-- widgets\n            `-- readme.txt\n[/code]\n\nThe directory structure is explained in detail in [doc library], but for now we are going to concentrate on the XML files in the [c]logic[/c] sub-directory -- which contains executable code.\n\nThe start library command has created a number of XML files for us, such as [b]models.xml[/b], [b]content.xml[/b], [b]widgets.xml[/b] etc. The filenames are merely a suggestion for how to organize a typical project. You are free to name your code in any way.\n\nFor this tutorial we will be putting everything in a single file, so go ahead and delete all the .xml files in the [c]logic[/c] directory. Then create a file called [c]blether.xml[/c] which should contain the following (feel free to cut and paste):\n\n[code xml]\n<moya xmlns=\"http://moyaproject.com\"\n    xmlns:let=\"http://moyaproject.com/let\"\n    xmlns:forms=\"http://moyaproject.com/forms\"\n    xmlns:html=\"http://moyaproject.com/html\"\n    xmlns:db=\"http://moyaproject.com/db\">\n\n    <!-- Code goes here -->\n\n</moya>\n[/code]\n\nThis code is entirely [i]boilerplate[/i]; the [tag]moya[/tag] tag begins the Moya code file, and the XML [link xml#namespaces]namespace[/link] declations tell Moya which tags we will be using. We will be adding code to this file in the rest of this tutorial.\n\n[h1]Creating a Mountpoint[/h1]\n\nThe first thing we want to do is to create a [i]mountpoint[/i]. This is how Moya maps an incoming URL to the the [i]view[/i] that will generate a response.\n\nOpen [c]blether.xml[/c] and insert the following inside the [tag]moya[/tag] tag.\n\n[code xml]\n<mountpoint name=\"main\">\n    <url route=\"/\" view=\"#view.front\" />\n</mountpoint>\n\n<view libname=\"view.front\">\n    <return-str>Ready to Blether!</return-str>\n</view>\n[/code]\n\nNow if you run the server and go to the root URL you should find that the text in the [tag]view[/tag] tag above appears in your browser.\n\nSo what is happening here? Moya compares the requested url ([c]/[/c]) to the [c]route[/c] attribute on the [tag]url[/tag] tags in the project -- and it finds a match with [tag]url[/tag] above. Moya then looks at the attribute called [c]view[/c] which contains the text [c]#view.front[/c]. This is an example of an [link moyacode#element-references]element reference[/link], which directs Moya to another tag; in this case the [tag]view[/tag] tag we just wrote. Moya then executes the code in the view to generate a response for the browser.\n\nWe will learn how to generate a more interesting response later, for now we will move on to creating creating a database model to store blethers.\n\n[h1]Creating the Model[/h1]\n\nIn order to store the blethers in the database we need to create a [i]model definition[/i], which describes the fields in a database table.\n\nAdd the following lines to [c]blether.xml[/c]:\n\n[code xml]\n<model libname=\"Blether\" xmlns=\"http://moyaproject.com/db\">\n    <datetime name=\"posted_time\" label=\"Blethered on\" null=\"no\" auto=\"yes\"/>\n    <string name=\"text\" length=\"140\"/>\n</model>\n[/code]\n\nThis creates a simple model with two fields; [c]posted_time[/c] is the date the blether was posted, and [c]text[/c] is the contents of the blether.\n\nWhen you add a new model, you will need to [i]sync[/i] the database again, in order to create the new tables. Run the following to create tables for the blether model:\n\n[code]\n$ moya db sync\n[/code]\n\nWith the model created, we can now work on the user interface to add new blethers to the timeline.\n\n[h1]Blether Form[/h1]\n\nWe need a simple form consisting of a text area and a button to submit a new blether. Moya's [link forms]form library[/link] makes creating such forms relatively simple. Add the following to [c]blether.xml[/c]:\n\n[code xml]\n<form libname=\"form.new-blether\" style=\"basic\" xmlns=\"http://moyaproject.com/forms\">\n    <text-area name=\"text\" maxlength=\"140\" required=\"yes\"/>\n    <submit-button text=\"Blether!\" />\n    <validate-field field=\"text\">\n        <fail if=\"len:value gt 140\">\n            140 characters is enough for anyone!\n        </fail>\n    </validate-field>\n</form>\n[/code]\n\nThis is an example of a [i]form definition[/i]. It has two form fields; a [tag forms]text-area[/tag] called [c]text[/c], and a [tag forms]submit-button[/tag]. It also has a [tag forms]validate-field[/tag] tag which checks that fields have been entered correctly; in this case it detects if the user has entered a blether greater than 140 characters in length.\n\nTo add this to our web application, we will need to create a [i]content[/i] definition, which we will cover in the next section:\n\n[h1]Blether Content[/h1]\n\nMoya [i]content[/i] is essentially a high level description of a page, which is used to assemble HTML from various components. We need a [i]content definition[/i] to display a form and the list of blethers. Cut and paste the following to your [c]blether.xml[/c]:\n\n[code xml]\n<content libname=\"content.front\">\n    <title>Blether</title>\n    <section name=\"body\">\n        <html:div class=\"col-md-6 col-md-offset-3\">\n            <render src=\"form\" if=\"permission:'admin'\"/>\n        </html:div>\n    </section>\n</content>\n[/code]\n\nThis code begins the content definition and sets the title to [c]'Blether'[/c]. Content is divided in to [i]sections[/i] which tell Moya what to render in various parts of the page (such as body, column, footer etc). Our content definition defines a single section called [c]body[/c], which will contain the majority of the page.\n\nInside the [tag]section[/tag] tag is a [c]div[/c] tag which wraps its children in a simple HTML [c]<div>[/c] with the class [c]\"col-md-6 col-md-offset-3\"[/c]. This is [url http://getbootstrap.com/]Bootstrap[/url] CSS which creates a narrow column for our blethers.\n\nInside the column is a [tag render]render[/tag] tag which renders a form. Note that it has a condition ([c]if[/c] attribute] which skips the form if the current user is not an admin user (because we don't want regular visitors to create blethers).\n\nNext we will cover how to use this content definition to render a page.\n\n[h1]Updating the View[/h1]\n\nThe simplest way to render content is to add a [c]content[/c] attribute to the [tag]view[/tag]. This tells Moya to render the content with any data generated by the view.\n\nTo see the form, replace the [tag]view[/tag] with the following:\n\n[code xml]\n<view libname=\"view.front\" content=\"#content.front\">\n    <if test=\"permission:'admin'\">\n        <forms:get form=\"#form.new-blether\" dst=\"form\"/>\n    </if>\n</view>\n[/code]\n\nThis will get our form and store it an a value called [c]form[/c], which can then be rendered by the content.\n\nIf you run the server now -- and you are logged in -- you should see a text area and a button. The [tag]if[/tag] tag ensures that the form is only shown if you are a logged in as an admin user. You may now enter text, but nothing will happen when you click the submit button as the code isn't yet [i]processing[/i] the form. Replace the view with the following to do just that:\n\n[code xml]\n<view libname=\"view.front\" content=\"#content.front\">\n    <if test=\"permission:'admin'\">\n        <forms:get form=\"#form.new-blether\" dst=\"form\"/>\n        <forms:validate src=\"form\">\n            <db:create model=\"#Blether\" let:text=\"form.data.text\" />\n            <redirect-to path=\".\" />\n        </forms:validate>\n    </if>\n</view>\n[/code]\n\nThis gets the form as before, but it also calls [tag forms]validate[/tag] which checks the form for errors, and runs the enclosed code if the form was submitted successfully. Inside the [tag forms]validate[/tag] we call [tag db]create[/tag] which adds a new blether to the database, then call [tag]redirect-to[/tag] to reload the page.\n\nIf you enter a blether now and submit, you should find that the form resets, but the blethers wont be visible. We will cover how to render the blethers in the next section.\n\n[h1]Rendering Blethers[/h1]\n\nTo render the blethers created by the user, we must read them back from the database. This can be done with the [tag db]query[/tag] tag as follows:\n\n[code xml]\n<db:query model=\"#Blether\" orderby=\"-posted_time\" dst=\"blethers\" />\n[/code]\n\nThis [i]queries[/i] the database for all the blethers, sorted by the time they were posted.\n\nAdd this line to the view, which should now be as follows:\n\n[code xml]\n<view libname=\"view.front\" content=\"#content.front\">\n    <db:query model=\"#Blether\" orderby=\"-posted_time\" dst=\"blethers\" />\n    <if test=\"permission:'admin'\">\n        <forms:get form=\"#form.new-blether\" dst=\"form\"/>\n        <forms:validate src=\"form\">\n            <db:create model=\"#Blether\" let:text=\"form.data.text\" />\n            <redirect-to path=\".\" />\n        </forms:validate>\n    </if>\n</view>\n[/code]\n\nNext, we need to modify the content to render the blethers. The value returned from [tag db]query[/tag] is a [i]queryset[/i] which can be treated like a list. Replace the content definition with the following:\n\n[code xml]\n<content libname=\"content.front\">\n    <title>Blether</title>\n    <section name=\"body\">\n        <html:div class=\"col-md-6 col-md-offset-3\">\n            <render src=\"form\" if=\"permission:'admin'\"/>\n            <for src=\"blethers\" dst=\"blether\">\n                <node template=\"blether.html\" let:blether=\"blether\"/>\n            </for>\n        </html:div>\n    </section>\n</content>\n[/code]\n\nNote the addition of the [tag]for[/tag] loop. This [i]iterates[/i] through the blethers and calls [tag]node[/tag] to render an individual blether with a [i]template[/i] called [c]blether.html[/c]. A [link templates]template[/link] is a text file with a special markup to generate HTML.\n\nThe template should be the following:\n\n[code moyatemplate]\n<div class=\"alert alert-info\">\n    <div class=\"text-muted text-right\">posted ${localize:blether.posted_time}</div>\n    <p>${blether.text}</p>\n</div>\n[/code]\n\nThis template inserts the blether posted time and text in to a panel.\n\nSave the template as [c]blether.html[/c] in the library's [c]templates[/c] directory.\n\n[h1]Finished Product[/h1]\n\nIf you have been following along with the code edits, your [c]blether.xml[/c] should look like the following:\n\n[code xml]\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<moya xmlns=\"http://moyaproject.com\"\n    xmlns:let=\"http://moyaproject.com/let\"\n    xmlns:forms=\"http://moyaproject.com/forms\"\n    xmlns:html=\"http://moyaproject.com/html\"\n    xmlns:db=\"http://moyaproject.com/db\">\n\n    <mountpoint name=\"main\">\n        <url route=\"/\" view=\"#view.front\" />\n    </mountpoint>\n\n    <view libname=\"view.front\" content=\"#content.front\">\n        <db:query model=\"#Blether\" orderby=\"-posted_time\" dst=\"blethers\" />\n        <if test=\"permission:'admin'\">\n            <forms:get form=\"#form.new-blether\" dst=\"form\"/>\n            <forms:validate src=\"form\">\n                <db:create model=\"#Blether\" let:text=\"form.data.text\" />\n                <redirect-to path=\".\" />\n            </forms:validate>\n        </if>\n    </view>\n\n    <model libname=\"Blether\" xmlns=\"http://moyaproject.com/db\">\n        <datetime name=\"posted_time\" label=\"Blethered on\" null=\"no\" auto=\"yes\"/>\n        <string name=\"text\" length=\"140\"/>\n    </model>\n\n    <form libname=\"form.new-blether\" style=\"basic\" xmlns=\"http://moyaproject.com/forms\">\n        <text-area name=\"text\" maxlength=\"140\" required=\"yes\"/>\n        <submit-button text=\"Blether!\" />\n        <validate-field field=\"text\">\n            <fail if=\"len:value gt 140\">\n                140 characters is enough for anyone!\n            </fail>\n        </validate-field>\n    </form>\n\n    <content libname=\"content.front\">\n        <title>Blether</title>\n        <section name=\"body\">\n            <html:div class=\"col-md-6 col-md-offset-3\">\n                <render src=\"form\" if=\"permission:'admin'\"/>\n                <for src=\"blethers\" dst=\"blether\">\n                    <node template=\"blether.html\" let:blether=\"blether\"/>\n                </for>\n            </html:div>\n        </section>\n    </content>\n\n</moya>\n[/code]\n\nIf you run the server now, you should be able to enter a 140 character blether in the text area, which will be added to the timeline when you click the submit button.\n\n[h1]Extra Credit[/h1]\n\nOur blether timeline is working now, but there is a flaw; the list of blethers could grow very large. We should split up the blethers in to more manageable pages, a process known as [i]pagination[/i].\n\nOne of the advantages of working with Moya's content system, is that it is simple to add new features to a page. Let's use a [link content#widgets]widget[/link] from the built in [link widgets]Moya Widgets[/link] library.\n\nFirst of all, add the namespace [c]xmlns:w=\"http://moyaproject.com/widgets\"[/c] to the start of the file. This makes a number of widgets available with the [c]w:[/c] prefix. Next, replace the [tag]for[/tag] loop in the content with a [tag widgets]paginate[/tag] widget. The content should now look like the following:\n\n[code xml]\n<content libname=\"content.front\">\n    <title>Blether</title>\n    <section name=\"body\">\n        <html:div class=\"col-md-6 col-md-offset-3\">\n            <render src=\"form\" if=\"permission:'admin'\"/>\n            <w:paginate src=\"blethers\" dst=\"blether\">\n                <node template=\"blether.html\" let:blether=\"blether\"/>\n            </w:paginate>\n        </html:div>\n    </section>\n</content>\n[/code]\n\nNow if you run the server and add a number of blethers, you should see a pagination control when the list is 10 items long. You can use this control to navigate forwards and backwards between each page, or jump to a particular page.\n\n[h1]Moya's Debugger[/h1]\n\nWhile not strictly necessary for this tutorial, now would be a good time to test Moya's debugger. Try running the development server with the following:\n\n[code]\n$ moya runserver --breakpoint\n[/code]\n\nNow if you refresh the page on the browser, you should find that the terminal is displaying code from the start of the view, and waiting for your input. If you type [c]s[/c] and hit return, you can step through the code a line at a time. Enter [c]help[/c] to see a list of other commands you can use.\n\nRather than use the [c]--breakpoint[/c] switch, you may also insert a [tag]breakpoint[/tag] in your code, which tells Moya to stop executing the code at that point and drop in to the debugger.\n\nThe [link moyacode#using-the-debugger]debugger[/link] is a great way of analyzing your code when it isn't running as expected.\n\n[h1]What Next?[/h1]\n\nThe project we have just created demonstrates a few of the core concepts of a Moya project. If you want to build on it, you should probably read the [link index]Reference[/link] and/or have a look at the example projects in the source code.\n\nThere is a much more feature-rich version of Blether in the examples directory. This Blether project implements more Twitter-like features, including multiple users/timelines and the ability to follow other users. You should find this a good example of a production-ready web application written in Moya.",
        "class": "tutorial",
        "name": "tutorial",
        "docmap": [
            [
                1,
                "Prerequisites"
            ],
            [
                1,
                "Blether"
            ],
            [
                1,
                "Starting the Project"
            ],
            [
                1,
                "Running a Server"
            ],
            [
                2,
                "Server XML"
            ],
            [
                1,
                "Creating the Library"
            ],
            [
                1,
                "Editing the Library"
            ],
            [
                1,
                "Creating a Mountpoint"
            ],
            [
                1,
                "Creating the Model"
            ],
            [
                1,
                "Blether Form"
            ],
            [
                1,
                "Blether Content"
            ],
            [
                1,
                "Updating the View"
            ],
            [
                1,
                "Rendering Blethers"
            ],
            [
                1,
                "Finished Product"
            ],
            [
                1,
                "Extra Credit"
            ],
            [
                1,
                "Moya's Debugger"
            ],
            [
                1,
                "What Next?"
            ]
        ],
        "title": "Moya Tutorial"
    },
    "id": "doc.tutorial"
}