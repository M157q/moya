{
    "name": "urls",
    "doc_namespace": "doc",
    "doc_class": "doc",
    "references": [
        "doc.index"
    ],
    "data": {
        "body": "[title URLs, Views and Middleware]\n\nThe first thing Moya does when handling a request from the browser is to look at the requested URL and invoke the code in your project that will generate a response.\n\n[h1]Mountpoints[/h1]\n\nA library may expose a number of [i]mountpoints[/i], which are collections of URLS to be handled by the application. The URLs defined in a mountpoint are relative to the location where the application has been mounted. For instance, if a blog application was mounted on the path [c]/blog/[/c], it would be able to handle the path [c]/blog/posts/[/c] and all other paths under [c]/blog/[/c].\n\nLet's look at an example of a simple mountpoint:\n\n[code xml]\n<mounpoint>\n    <url route=\"/\">\n        <echo>Received a request for /</echo>\n    </url>\n</mountpoint>\n[/code]\n\nAssuming this was a part of a library called [c]moyaproject.sushifinder[/c], it would be mounted with the following lines inside the project's [tag]server[/tag] as follows:\n\n[code xml]\n<install name=\"sushifinder\" lib=\"moyaproject.sushifinder\"/>\n<mount app=\"sushifinder\" url=\"/sushifinder/\" />\n[/code]\n\nNow if you run the development server and visit [c]/sushifinder/[/c], you should find that a line of text will be echoed in the console. The page returned will be a [i]404 not found[/i] response because although Moya has invoked the code inside the [tag]url[/tag] tag, it hasn't generated any kind of response. We'll cover the various methods of generating a response later in this chapter.\n\n[h2]Mountpoint Names[/h2]\n\nLibraries can have more than one mountpoint, which gives the project author the opportunity to chose a different path for each mountpoint, or to decide which mountpoints should be mounted at all. For instance a library may have a separate mountpoint for administration functionality and user views. The [c]name[/c] attribute in [tag]mountpoint[/tag] is used to name the mountpoint. This name is used by the [tag]mount[/tag] tag to tell Moya which mountpoint to use.\n\nLet's demonstrate this by adding a second mountpoint:\n\n[code xml]\n<mounpoint>\n    <url route=\"/\">\n        <echo>Received a request for /</echo>\n    </url>\n</mountpoint>\n<mountpoint name=\"shop\">\n    <url route=\"/\">\n        <echo>Handling Shop</echo>\n    </url>\n</mountpoint>\n[/code]\n\nHere we have added a second mountpoint with a name of [c]'shop'[/c]. We can mount this new mountpoint by adding the following to the [tag]server[/tag] tag as follows:\n\n[code xml]\n<install name=\"sushifinder\" lib=\"moyaproject.sushifinder\"/>\n<mount app=\"sushifinder\" url=\"/sushifinder/\" />\n<mount app=\"sushifinder\" url=\"/checkout/\" mountpoint=\"shop\" />\n[/code]\n\nThe second mountpoint has been mounted on [c]/checkout/[/c], so visiting that URL will echo a different message to the console.\n\n[h2]Default Mountpoint[/h2]\n\nThe default value for the [c]name[/c] attribute on [tag]url[/tag] is [c]'main'[/c], which is also the default value for [c]mountpoint[/c] in the [tag]mount[/tag] tag. This is why we didn't need the [c]name[/c] attribute to mount the first mountpoint we created.\n\n[h2]Mount Shortcut[/h2]\n\nIt is very common to mount the default mountpoint immediately after installing the application. Because of this, Moya adds a shortcut to the [tag]install[/tag] which will mount the default mountpoint. If you set the [c]mount[/c] attribute, Moya will mount the default mountpoint on that path. Here's how we would use this to simplify the code in [tag]server[/tag]:\n\n[code xml]\n<install name=\"sushifinder\" lib=\"moyaproject.sushifinder\" mount=\"/sushifinder/\"/>\n[/code]\n\nThis only works for the default mointpoint (named [c]'main'[/c]). We would still need [tag]mount[/tag] tags for other mountpoints.\n\n[h1]URL Routes[/h1]\n\nThe code in a [tag]url[/tag] tag is invoked if it matches the supplied [i]route[/i], specified with the [c]route[/c] attribute. A route can be a simple URL, if it is designed to handle a single page, or can contain a [i]wildcard[/i] in curly brackets ([c]{}[/c]) if it is to match a number of URLs in a particular format. Here's an example of a [tag]url[/tag] with a wildcard route:\n\n[code xml]\n<url route=\"/list/{product}/\">\n    <echo>Listing product ${url.product}</url>\n</url>\n[/code]\n\nWhen moya sees text enclosed in curly brackets ([c]{[/c] and [c]}[/c]) it will match that part with any text in the requested URL. For instance, if the above URL was mounted in the sushifinder application, it would match [c]/sushifinder/list/tunaroll/[/c] and [c]/suhifinder/list/sake-nigiri/[/c]. Moya also extracts the matched text and stores it in a dictionary called [c]url[/c] (the text in the curly brackets is used as the key). So with the previous examples URLs, [c]url.product[/c] would be [c]'tunaroll'[/c] or [c]'sake-nigiri'[/c]. Moya also stores a copy of the [c]url[/c] dictionary in the root of the context, so that it is always accessible as [c].url[/c].\n\n[h2]Route Types[/h2]\n\nThe route matching syntax also supports specifying the format of the text that matches. For instance, let's say we have a URL route as follows:\n\n[code]\n/blog/{year}/{month}/\n[/code]\n\nThis will match [c]/blog/2014/7/[/c], but it will also match [c]/blog/some-text/not-a-month/[/c], which might cause problems if we attempt to use text where we expect a number. You can tell Moya to only match a particular set of characters by specifying the type followed by a colon then the name. For example, we can re-write the above URL as the following:\n\n[code]\n/blog/{integer:year}/{integer:month}/\n[/code]\n\nThe [c]integer:[/c] prefix tells Moya to match only valid numbers. The URLs containing text would now [i]not[/i] match and Moya would return a '404 not found' page (assuming they match no other URL that is).\n\n[alert NOTE]Note that, the [c]integer:[/c] prefix only tells Moya to match digits, the value of [c]url.year[/c] and [c]url.month[/c] will still be strings. If you do need integers values, you can convert the strings to a number in an expression with the [c]int:[/c] modifier.[/alert]\n\nThe following is a list of the route match types:\n\n[definitions]\n\n[define alpha]\nMatches alpha numeric characters (letters and numbers).\n[/define]\n\n[define slug]\nMatches characters suitable for a [i]slug[/i] (letters, numbers, underscore and hyphen).\n[/define]\n\n[define integer]\nMatches a valid integer. May be negative.\n[/define]\n\n[define float]\nMatches a floating point number. May be negative.\n[/define]\n\n[define posinteger]\nMatches a positive integer (a number greater than 0).\n[/define]\n\n[define posfloat]\nMatches a positive floating point number (greater than 0).\n[/define]\n\n[/definitions]\n\n[h2]Matching Paths[/h2]\n\nNormally Moya will only match only text between slashes. Occasionally it may be necessary to match text that includes forward slashes (typically to match paths). You can tell Moya to do this in the path matching syntax by prefixing it with an asterisk. Here's an example:\n\n[code]\n/serve/{*path}\n[/code]\n\nThis will match any URL that starts with [c]/serve/[/c], and extract the remainder of the URL. For instance, it will match the URL [c]/serve/media/images/sushi.png[/c], and [c]url.path[/c] with contain [c]media/images/sushi.png[/c].\n\n[h2]Matching Methods[/h2]\n\nYou can write URLs which match only particular [url http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods]http methods[/url]. The default for a view is to match both GET and POST requests, but it is possible to match any combination of methods by specifying a comma separated list in the [c]methods[/c] attribute of the [tag]view[/tag]. Here's how we can define two [tag]url[/tag] tags for the same route, one will handle GET requests, and the other will handle POST requests:\n\n[code xml]\n<url route=\"/product/{product}/\" methods=\"GET\">\n    <echo>render a product page</echo>\n</url>\n<url route=\"/product/{product}/\" methods=\"POST\">\n    <echo>handle a form on the product page</echo>\n</url>\n[/code]\n\nSeparate handlers for GET and POST requests can be convenient. The default, however, is to handle both GET and POST in the same [tag]url[/tag]. The value [c].request.method[/c] contains the current method, so you could use the expression [c].request.method=='POST'[/c] to detect a post request. Alternatively, the [tag]if-post[/tag] tag will execute a block of code if the current request is a POST request.\n\n[h2]Naming Routes[/h2]\n\nWhen you define a [tag]url[/tag], you can supply an optional [c]name[/c] parameter which you can use to [i]look up[/i] the URL. This is important because the final URL can change if the application is mounted in a different location. If we were to hard-code that URL (such as in [link templates]template[/link] code) we would have to manually update every point where that URL was used if the application was mounted in a different location. For example, lets look at a URL in our fictitious sushifinder application:\n\n[code xml]\n<url route=\"/reviews/\">\n    <echo>Product reviews</url>\n</url>\n[/code]\n\nIf we mount the app on [c]/sushifinder/[/c] then the final URL for the page would be [c]/sushifinder/reviews/[/c]. We could use this URL in a template, and it would appear to work just fine. A problem arises if we mount that application in a different location; all of a sudden any links to that page are broken and will likely return a [c]404 Not Found[/c] response. The solution is to first give the URL a name. For example:\n\n[code xml]\n<url route=\"/reviews/\" name=\"reviews_index\">\n    <echo>Product reviews</url>\n</url>\n[/code]\n\nWe can now replace any references to that URL in our template with a [link templates#url]{% url %}[/link] template tag, as follows:\n\n[code moyatemplate]\n<a href=\"{% url 'reviews_index' %}\">Sushi Reviews</a>\n[/code]\n\nNow, if the final URL changes, The links to it within templates will update automatically. You may do the same thing in Moya code with the [tag]get-url[/tag] tag as follows:\n\n[code xml]\n<get-url name=\"reviews_index\" dst=\"reviews_url\" />\n<echo>The URL for reviews is ${reviews_url}</echo>\n[/code]\n\nAs we've seen, some URLs may contain parameters. Moya needs these extra parameters in order to generate the full URL. The following is an example of a URL with a parameter:\n\n[code xml]\n<url route=\"/reviews/{product}/\" name=\"reviews_product\">\n    <echo>Product reviews</url>\n</url>\n[/code]\n\nThe above [tag]url[/tag] actually defines a number of URLs, depending on the value of [c]product[/c]. If we want to link to a particular product, we must let Moya know what that product is. Here's how we would link to a product called [c]nigiri[/c] in a template:\n\n[code moyatemplate]\n<a href=\"{% url 'reviews_product' with product='nigiri' %}\">Go to Nigiri Reviews</a>\n[/code]\n\nIn Moya code we can generate the same URL by passing the URL parameters to [tag]get-url[/tag] as a LET value. Here's how:\n\n[code xml]\n<get-url name=\"reviews_product\" let:product=\"nigiri\" dst=\"nigiri_reviews_url\" />\n<echo>The URL for nigiri reviews is ${nigiri_reviews_url}</echo>\n[/code]\n\n[h2]URLS Container[/h2]\n\nAn alternative to [tag]get-url[/tag] for looking up URLs is the [i]URL container[/i] object in the context ([c].urls[/c]). This object contains all URLs in the project in a hierarchical format. For instance [c].urls.auth.login[/c] will return a URL to the login page in [c]auth[/c] application.\n\n[aside]The URL container is accessible from templates as well.[/aside]\n\nFor URLs that contain parameters you will need to append values for those parameters in parenthesis. For example, the following gets the About page from the Pages application:\n\n[code xml]\n<echo>About URL is: ${.urls.pages.showpage(pagename='about')}</echo>\n[/code]\n\nThe [c](pagename='about')[/c] syntax supplies the missing parameters. Without a parameter for [c]pagename[/c] Moya will be unable to generate a working URL, and will raise an error.\n\nThe URLs container object may be explored via the debugger. Probably the simplest way to do this would be to run the server with the [c]--breakpoint[/c] switch, as follows:\n\n[code]\n$ moya runserver --breakpoint\n[/code]\n\nThen load any page in the browser (e.g. [url http://127.0.0.1:8000]http://127.0.0.1:8000[/url]). Moya will immediately drop in to the debugger. If you inspect the value [c].urls[/c], you should see a table of mountpoints in each application. If you inspect a mountpoint (e.g. [c].urls.pages[/c]) you will see a table of URLs.\n\n[h1]Generating a Response[/h1]\n\nWe've seen how invoke code that matches a particular URL, but so far we've only written to the console when a URL is requested. To build a real web application we will need to generate a [i]response[/i], which will typically be a page of [url http://en.wikipedia.org/wiki/Html]HTML[/url].\n\nWhen Moya executes the code inside a [tag]url[/tag], it treats the contents as a macro (or [i]function[/i]). If we return (with [tag]return[/tag]) something from a [tag]url[/tag] tag, Moya will convert that return value to HTML and serve it to the browser. Here's an example of returning HTML from a [tag]url[/tag] tag:\n\n[code xml]\n<!-- This should be inside a mountpoint tag -->\n<url route=\"/test/\">\n    <return>\n        <html><![CDATA[\n           <h1>Hello, World!</h1>\n        ]]></html>\n    </return>\n</url>\n[/code]\n\n[aside]Note the user of [url http://en.wikipedia.org/wiki/Cdata]CDATA[/url] in the above lising. This tells the XML parser to treat the contents as text and not as tags (so we can mix HTML with XML).[/aside]\n\nDon't worry if this looks clumsy to you. Returning HTML like this is rarely done in a real project -- there are much better ways of generating a response which we will cover next.\n\n[h2]Rendering Templates[/h2]\n\nA more convenient (and powerful) way of generating a response is to render a [link templates]template[/link], which is a text file with a special markup. We can do this with the [tag]render-template[/tag] tag. Here's an example of generating a page of HTML from a template:\n\n[code xml]\n<url route=\"/test2/\">\n    <return>\n        <render-template template=\"/hello.html\" let:name=\"'World'\"/>\n    </return>\n</url>\n[/code]\n\nHere is the template for use with the above code (saved as [c]\"hello.html\"[/c] in the templates directory):\n\n[code moyatemplate]\n<h1>Hello, ${name}!</h1>\n[/code]\n\nNow when you request [c]/test2/[/c], Moya will [i]render[/i] [c]\"hello.html\"[/c] with the value for [c]name[/c] replaced with the text we supplied to the [tag]render-template[/tag] tag. The resulting string is then served as a standard HTML response. See [doc templates] for more information on writing templates.\n\nIn the preceding example we returned a string which Moya used to generate the response. Moya also offers the [tag]serve-template[/tag] tag which renders a template and immediately returns the response, negating the need to return a value. The following code is equivalent to the preceding example:\n\n[code xml]\n<url route=\"/test3/\">\n    <serve-template template=\"/hello.html\" let:name=\"'World'\" />\n    <echo>Moya will never get here</echo> <!-- see below -->\n</url>\n[/code]\n\nNote that because the [tag]serve-template[/tag] generates and returns a response, the following [tag]echo[/tag] line never gets called. This is generally useful because it is rare to need to do any more processing once you have a response.\n\nThe [tag]serve-template[/tag] has an optional parameter [c]withscope[/c] which tells Moya to use the current local variables (anything variables created in the URL) when generating the template. This negates the need to specify the template data explicitly, which can save some time. Here's an example of rendering and serving a template with local variables, equivalent to the previous example:\n\n[code xml]\n<url route=\"/test4/\">\n    <str dst=\"name\">World</str>\n    <serve-template template=\"/hello.html\" withscope=\"yes\"/>\n</url>\n[/code]\n\nWhen Moya renders [c]hello.html[/c], the template will have access to the [c]name[/c] variable even though it wasn't explicitly specified. Serving templates with the current scope can save some time, but it is not always desirable to expose everything to the templates in this way. If you have something in the local scope that you [i]don't[/i] want to be used in the template, it may be a better idea to explicitly list the variables you do want.\n\n[h2]Serving Files[/h2]\n\nThe [tag]serve-file[/tag] tag may be used to serve a static file from any [url project#filesystem]filesystem[/url] in the project. Here's an example of using [tag]serve-file[/tag] to serve files from a filesystem called [c]photos[/c]:\n\n[code xml]\n<url route=\"/photos/{*path}\">\n    <serve-file fs=\"photos\" path=\"${url.path}\"/>\n</url>\n[/code]\n\nNote the asterisk in the url route, which tells Moya to match the remainder of the path, including forward slashes. When Moya receive a request for a URL beginning with [c]/photos/[/c], such as [c]/photos/menu/nigiri.jpg[/c], the portion after [c]/photo/[/c] is stored in [c]url.path[/c]. This result is the [tag]serve-file[/tag] tag being called with a path of [c]menu/nigiri.jpg[/c]. If that file exists in the [c]photos[/c] filesystem it will be served, otherwise Moya will return a [c]404 Not Found[/c] response.\n\n[alert NOTE]The builtin application [link static]Moya Static[/link] will also serve static files. It can also generate index pages.[/alert]\n\n[h2]Redirects[/h2]\n\nMoya can serve a [i]redirect[/i] response which tells the browser to request a new URL. There are two tags that do this; [tag]redirect-to[/tag] which redirects to a relative path or a new URL entirely, and [tag]redirect[/tag] which redirects to a new [link urls#naming-routes]named url[/link]. Here's an example of redirecting to a new URL outside of the project:\n\n[code xml]\n<!-- can't sell sake to kids -->\n<redirect-to url=\"http://google.com\" if=\"not .request.POST.over_eighteen\" />\n[/code]\n\nThe [tag]redirect[/tag] tag is similar, but requires a named URL route in the project:\n\n[code xml]\n<redirect name=\"out_of_stock\" if=\"product.stock == 0\" />\n[/code]\n\nA similar concept to redirecting is [link urls#rewrites]rewriting[/link], which can serve content from a different URL [i]without[/i] changing the URL in the browser's location bar.\n\n[h2]Not Found[/h2]\n\nYou can serve a [c]404 Not Found[/c] response with the [tag]not-found[/tag] tag. Moya will generate a 404 automatically if no [tag]url[/tag] handled the current request, but sometimes you want to explicitly generate the not found response if the URL refers to a resource that is missing. Here's an example:\n\n[code xml]\n<url route=\"/product/{product}\">\n    <not-found if=\"url.product not in ['nigiri', tuna-roll', 'fugu']\" />\n    <serve-template template=\"product.html\" let:product=\"url.product\" />\n</url>\n[/code]\n\nThe [tag]not-found[/tag] tag in the above example checks that the value of [c]url.product[/c] equals one of three products. If it doesn't, Moya will serve a not found response.\n\nNot that because a not found response is a valid response, Moya will not check any more URLs for the current request after a [tag]not-found[/tag] tag. If you want skip processing the current [tag]url[/tag], but still look for other potential URL matches, you can use the [tag]done[/tag] tag.\n\n[h2]Forbidden[/h2]\n\nMoya can serve a [c]403 forbidden[/c] response, which tells the browser that the current user may not access that URL or resource. For example, the following URL generates a forbidden response if the user is not currently logged in:\n\n[code xml]\n<url route=\"/order/{product}/\">\n    <forbidden if=\"not .user\"/>\n</url>\n[/code]\n\n[h2]Other Responses[/h2]\n\nFor more control over the type of response generated you can use the [tag]response[/tag] tag, which constructs a response object. Return a response object from a [tag]url[/tag] to serve it. Here's an example of generating a [url http://en.wikipedia.org/wiki/Http_status_codes#4xx_Client_Error]418 I'm a teapot[/url] response:\n\n[code xml]\n<url route=\"/serve/tea/\">\n    <return>\n        <response status=\"im_a_teapot\">\n            Short and stout.\n        </response>\n    </return>\n</url>\n[/code]\n\n[alert NOTE]We're still looking for a Linux powered Teapot to test this on.[/alert]\n\n[h1]Handlers[/h1]\n\nWhen Moya is unable to return content due to an error or a 'not found' response, it will search the mountpoints for a [i]handler[/i] for that URL. This is so that your project has an opportunity to generate a custom response which would otherwise result in Moya serving default content.\n\nAll that is required to define a custom handler is to set the [c]handler[/c] attribute on a [tag]url[/tag] to the [link codes]HTTP status code[/link] you want to handle. Here's how we might write a handler for a not found response:\n\n[code xml]\n<url route=\"/product/{product}/\">\n    <not-found if=\"url.product not in ['nigiri', tuna-roll', 'fugu']\" />\n    <serve-template template=\"product.html\" let:product=\"url.product\" />\n</url>\n<url route=\"/product/{product}/\" handler=\"not_found\">\n    <serve-template template=\"product_not_found.html\" let:product=\"url.product\" />\n</url>\n[/code]\n\nThe first [tag]url[/tag] we have seen before; it will be invoked when the user requests [c]/sushifinder/product/unagi/[/c], but because it is [i]not[/i] one of the three products it will generate a [c]404 not found[/c] response. Normally this will generate a standard response, but because the second [tag]url[/tag] is a handler for [c]not_found[/c], Moya will invoke that code, which serves a template called [c]\"product_not_found.html\"[/c]. This other template could generate a more specific message for the user, or possibly offer a search box so the user may find other products.\n\n[h2]Default Handlers[/h2]\n\nIf your project doesn't explicitly define a handler for a status code, Moya will attempt to render and serve a template called [c]<status code>.html[/c]. For example, if your project generates a [c]404 not found[/c] response or there is no matching [tag]url[/tag], Moya will serve the template [c]404.html[/c] in the root of your templates directory.\n\nIt is recommended that you at least define templates [c]404.html[/c] (not found) and [c]500.html[/c] (internal error). If they are not present, Moya will generate a rather dull looking page without your site's branding.\n\nNote that if you are running the server with [link project#project-settings]debug enabled[/link] then the Moya Debug application will supply templates for [c]404.html[/c] and [c]500.html[/c]. These templates will generate a helpful response when you are debugging, but you will need to disable debug mode if you want to test your versions of these templates.\n\n[h1]Rewrites[/h1]\n\nYou can change the URL that Moya is currently processing with the [tag]rewrite[/tag] tag which rewrites to a named url in the project, or with [tag]rewrite-to[/tag] which can rewrite to an abitrary URL. When Moya sees either of these tags it will stop processing further URLs and start again with the new URL. This is a similar concept to [link urls#redirects]redirects[/link] -- the difference is that Moya will serve the content for the new URL in the current request [i]without[/i] changing the URL in the user's browser.\n\nLet's look at an example of where you might use a rewrite. If your site has been translated in to a number of languages, one way of switching between languages would be to have the languages code as the first component of the URL. For example [c]/fr/about/[/c] should show the about page in French. But we also want [c]/about/[/c] to show the default language of English. Here's how we could do that with the [tag]rewrite-to[/tag] tag:\n\n[code xml]\n<url route=\"/{lang}/{*path}\">\n    <if test=\"lang in ['en', 'fr', 'es']\">\n        <set-language language=\"${lang}\" />\n        <rewrite-to path=\"${path}\" />\n    </if>\n</url>\n[/code]\n\nThis [tag]url[/tag] tag matches the first component of the a URL. If the first component is one of the supported languages, then the enclosed code will set the language and rewrite the URL to the remainder of the path. Otherwise the URL is served as normal.\n\n[aside]Rewriting the URL has its uses, but a [i]redirect[/i] is a generally more appropriate.[/aside]\n\n[h1]Views[/h1]\n\nWe've seen that Moya runs the code [tag]url[/tag] tags which match the requested URL. It is also possible to explicitly set a special callable tag called a [i]view[/i] which is responsible for generating a response. Typically code inside [tag]url[/tag] tags is reserved for simple things like permissions checks and redirects, the job of generating a page of HTML is delegated to a [tag]view[/tag] tag. Let's look at how we might modify a previous example to use a view:\n\n[code xml]\n<mountpoint>\n    <url route=\"/product/{product}/\" view=\"#view.product\">\n        <not-found if=\"url.product not in ['nigiri', tuna-roll', 'fugu']\" />\n    </url>\n<mountpoint/>\n\n<view libname=\"view.product\">\n    <serve-template template=\"product.html\" let:product=\"url.product\" />\n</view>\n[/code]\n\nHere we can see that the [tag]url[/tag] contains a conditional [tag]not-found[/tag] tag, which will return a [c]not found[/c] response [i]if[/i] the product in the url is not one of three products. Otherwise, the view specified in the [c]view[/c] attribute will be invoked.\n\nThe [c]view[/c] attribute of [tag]url[/tag] is an [link moyacode#element-references]element reference[/link]. It is set to [c]#view.product[/c], which tells Moya to use the view with a libname of [c]view.product[/c] in the current library. The [c]view.[/c] part of the libname is a convention -- it helps to keep your project organized if you name elements according to their type.\n\nMoya invokes the code inside the [tag]url[/tag] first. If that code doesn't generate a response, it will call the code inside the [tag]view[/tag]. Views have a number of advantages which we will cover next.\n\n[h2]Template Views[/h2]\n\nBecause rendering a template is by far the most common thing you will do in a view, the [tag]view[/tag] tag has a shortcut for this. You can specify a [c]template[/c] attribute on the view. This template will be rendered with any variables created in the current scope (i.e. within the view itself). Here's how we could re-write the view to take advantage of this:\n\n[code xml]\n<view libname=\"view.product\" template=\"product.html\">\n    <let product=\"url.product\"/>\n</view>\n[/code]\n\nWhen the above view runs, Moya renders [c]product.html[/c] with the current scope (the value for [c]product[/c] in this example). This negates the need for the explicit [tag]serve-template[/tag] tag.\n\n[h2]Explicit Template Data[/h2]\n\nIf you [i]don't[/i] want to pass everything in the current scope to the template (there may be intermediate data you don't want the template designer to reference), you can explicitly return the data which you want to render in the template. Here's how to do that:\n\n[code xml]\n<view libname=\"view.product\" template=\"product.html\">\n    <return>\n        <dict>\n            <let product=\"url.product\" />\n        </dict>\n    </return>\n</view>\n[/code]\n\nWhich method you use depends largely on how complex the view is. In a real project some views may do several database queries and calculations, resulting in a number of intermediate values that you [i]don't[/i] want to be available to the template. For these, you should use the more explicit way of specifying template data. Leave the implicit template rendering of the scope for simpler views.\n\nIf you find the preceding example a little verbose, you can use [tag]return-dict[/tag] which is a shortcut that returns a dictionary. Here's an example:\n\n[code xml]\n<view libname=\"view.product\" template=\"product.html\">\n    <return-dict>\n        <let product=\"url.product\" />\n    </return-dict>\n</view>\n[/code]\n\nYou can save on typing even further with the LET extension:\n\n[code xml]\n<view libname=\"view.product\" template=\"product.html\">\n    <return-dict let:product=\"url.product\"/>\n</view>\n[/code]\n\nAnother keyboard saving option is the [tag]return-scope[/tag], which parses a list of values to return from the scope. Here's an example:\n\n[code xml]\n<view libname=\"view.product\" template=\"product.html\"\">\n    <let product=\"url.product\"/>\n    <return-scope>\n        product\n    </return-scope>\n</view>\n[/code]\n\nThis is probably the best choice for complex views which calculate a lot of data.\n\n[h2]Content Views[/h2]\n\nThere is a another attribute which you can specify on a [tag]view[/tag], called [c]content[/c]. This renders a content element rather than a template. See [doc content] for how to work with content elements.\n\n[h1]Middleware[/h1]\n\nMiddleware is code that runs outside of the usual URL handling process in order to implement features that should be applicable to all requests. This is how the [link auth]Moya Auth[/link] library adds user and permission information to the context.\n\n[aside]Most libraries won't make use of middleware; it is generally used as a way of implementing advanced features.[/aside]\n\nTo create middleware, add a [tag]middleware[/tag] tag inside your [tag]mountpoint[/tag]. The [tag]middleware[/tag] tag takes similar attributes to [tag]url[/tag]; [c]route[/c], [c]methods[/c] and [c]name[/c] all have the same meaning. In addition, there is a [c]macro[/c] attribute which should be a reference to a [tag]macro[/tag] to call, and [c]stage[/c] which defines the point in the url handling process where middleware should be called. The following is a list of possible [i]stages[/i]:\n\n[definitions]\n[define request]\nRuns prior to any other requests.\n[/define]\n[define response]\nRuns after a response has been generated. The response will be available in [c].response[/c].\n[/define]\n[/definitions]\n\nHere's an example of adding middleware to a mountpoint:\n\n[code xml]\n<mountpoint>\n    <middleware route=\"/\" macro=\"middleware.sushi\" stage=\"request\" />\n    <url route=\"/product/{product}/\" view=\"#view.product\">\n        <not-found if=\"url.product not in ['nigiri', tuna-roll', 'fugu']\" />\n    </url>\n<mountpoint/>\n\n<macro libname=\"#middleware.sushi\">\n    <echo obj=\".request\" />\n</macro>\n[/code]\n\nWith the above code, every request under the mountpoint will invoke the macro (which prints the request to the console).\n\nIf the middleware code generates any kind of response (including redirects) then that will be served, and no more processing of URLs will occur.  In the case of middleware for the [c]response[/c] stage, a response has already been generated, and can be inspected as [c].response[/c] -- it is possible to modify this value, or issue a new response.\n",
        "name": "urls",
        "docmap": [
            [
                1,
                "Mountpoints"
            ],
            [
                2,
                "Mountpoint Names"
            ],
            [
                2,
                "Default Mountpoint"
            ],
            [
                2,
                "Mount Shortcut"
            ],
            [
                1,
                "URL Routes"
            ],
            [
                2,
                "Route Types"
            ],
            [
                2,
                "Matching Paths"
            ],
            [
                2,
                "Matching Methods"
            ],
            [
                2,
                "Naming Routes"
            ],
            [
                2,
                "URLS Container"
            ],
            [
                1,
                "Generating a Response"
            ],
            [
                2,
                "Rendering Templates"
            ],
            [
                2,
                "Serving Files"
            ],
            [
                2,
                "Redirects"
            ],
            [
                2,
                "Not Found"
            ],
            [
                2,
                "Forbidden"
            ],
            [
                2,
                "Other Responses"
            ],
            [
                1,
                "Handlers"
            ],
            [
                2,
                "Default Handlers"
            ],
            [
                1,
                "Rewrites"
            ],
            [
                1,
                "Views"
            ],
            [
                2,
                "Template Views"
            ],
            [
                2,
                "Explicit Template Data"
            ],
            [
                2,
                "Content Views"
            ],
            [
                1,
                "Middleware"
            ]
        ],
        "title": "URLs, Views and Middleware"
    },
    "id": "doc.urls"
}