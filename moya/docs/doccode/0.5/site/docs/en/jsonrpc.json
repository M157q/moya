{
    "name": "jsonrpc",
    "doc_namespace": "doc",
    "doc_class": "doc",
    "references": [
        "doc.index"
    ],
    "data": {
        "body": "[title Moya JSON-RPC]\n\n [url http://en.wikipedia.org/wiki/JSON-RPC]JSON-RPC[/url] is a way for the user's browser, or other computer systems, to communicate with your web application without the need for a page refresh -- a technique known as [url http://en.wikipedia.org/wiki/Ajax_(programming)]AJAX[/url]. While not the only way to implement AJAX, the JSON-RPC protocol is powerful, well-supported and easy to work with in Javascript. The [url http://www.jsonrpc.org/specification]specification[/url] is worth a read, but you won't need to be familiar with the inner workings to implement remote methods.\n\n[aside]Since JSON-RPC uses JSON and [i]not[/i] XML, it would be more accurate to call it AJAJ. However the term never really caught on, probably because it is not easy to pronounce.[/aside]\n\n[h1]Installation[/h1]\n\nThe Moya JSON-RPC library is built in to Moya and may be imported via its Python path as follows:\n\n[code xml]\n<import py=\"moya.libs.jsonrpc\"/>\n[/code]\n\nYou can install Moya JSON-RPC with the following:\n\n[code xml]\n<install name=\"jsonrpc\" lib=\"moya.jsonrpc\" />\n[/code]\n\nNote that this library doesn't provide any mountpoints or views, so doesn't strictly require being installed at all. The purpose of installing it is to serve the a JQuery plugin which can call the remote methods. If don't want to use this, then you can leave out the install line entirely.\n\n[h1]Namespace[/h1]\n\nThis library uses the namespace [c]http://moyaproject.com/jsonrpc[/c]. Since we will be mixing rpc methods with tags in the default namespace it is advisable to add [c]xmlns:rpc=\"http://moyaproject.com/jsonrpc[/c] to the top level tag, which will enable the [c]rpc:[/c] prefix.\n\n[h1]Interfaces[/h1]\n\nThe Moya JSON-RPC library handles the job of decoding requests, invoking methods (macros), and encoding the response. It can also generate a self-documenting index page.\n\nTo serve remote methods, add an [tag jsonrpc]interface[/tag] tag. An [i]interface[/i] is a container for your remote methods, and functions just like a view. You can mount an rpc interface in the same way you would mount a view, i.e. with the [c]view[/c] parameter on a [tag]url[/tag].\n\nHere's an example of the simplest possible interface:\n\n[code xml]\n<moya xmlns=\"http://moyaproject.com\"\n      xmlns:rpc=\"http://moyaproject.com/jsonrpc\">\n\n    <rpc:interface libname=\"jsonrpc.interface\">\n        <!-- methods go here -->\n    </rpc:interface>\n\n</moya>\n[/code]\n\nWe can mount this as follows:\n\n[code xml]\n<url route=\"/jsonrpc/\" methods=\"GET,POST\" view='#jsonrpc.interface' name=\"jsonrpc\" />\n[/code]\n\nNow if you were to visit [c]/jsonrpc/[/c] you would see the interface documentation page. Although without any [i]methods[/i] (see below), it will not be particularly useful.\n\n[h1]Methods[/h1]\n\nA [i]method[/i] is Moya code that may be invoked via JSON-RPC. You can define a method with the [tag jsonrpc]method[/tag] tag, which documents the method and sets the parameters the method will take, as well as containing the code the method will run.\n\nTo add a method to a interface, insert a [tag jsonrpc]method[/tag] inside the [tag jsonrpc]interface[/tag]. Alternatively, if you prefer to organize your methods differently you can put the [tag jsonrpc]method[/tag] elsewhere and link it to the interface with the [c]interface[/c] attribute. Here's an example of a trivial method that gets a string containing the current time:\n\n[code xml]\n<rpc:interface libname=\"jsonrpc.interface\">\n    <rpc:method name=\"time\">\n        <return-str>${.now}</return-str>\n    </rpc:method>\n</rpc:interface>\n[/code]\n\n[h2]Documenting Methods[/h2]\n\nYou can associate text with each method that will be displayed in the auto-generate documentation page, with the [tag jsonrpc]dpc[/tag] tag. Documentation is useful, even if the rpc methods are for internal use, but essential if third parties will be using your remote methods. Here's an example of adding a [tag jsonrpc]doc[/tag] to a remote method:\n\n[code xml]\n<rpc:interface libname=\"jsonrpc.interface\">\n    <rpc:method name=\"time\">\n        <doc>Get the current time.</doc>\n        <return-str>${.now}</return-str>\n    </rpc:method>\n</rpc:interface>\n[/code]\n\n[h2]Parameters[/h2]\n\nIf a method has parameters, the [tag jsonrpc]method[/tag] tag should contain a [tag jsonrpc]parameter[/tag] for each parameter. These are used to document the method and to validate remote calls. For example, parameters may be set as requried (with the [c]required[/c] attribute). You can also set a requirement on the type of the value in a remote call with the [c]type[/c] attribute, which should be one of the following values:\n\n[definitions]\n\n[define anything]\nNo particular requirements for the parameter.\n[/define]\n\n[define bool]\nThe parameter should be a boolean, e.g. [c]True[/c] or [c]False[/c].\n[/define]\n\n[define list]\nThe parameter should be a list, e.g [c][1, 2, 3, 4][/c].\n[/define]\n\n[define number]\nThe parameter should be a number, e.g [c]3.14[/c].\n[/define]\n\n[define object]\nThe parameter should be an object (dict in Moya), e.g. [c]{'foo': 'bar'}[/c].\n[/define]\n\n[define string]\nThe parameter should be a string, e.g. [c]\"moya\"[/c].\n[/define]\n\n[/definitions]\n\nIf the method call doesn't match the parameter requirements, then Moya JSON-RPC will return an appropriate response code.\n\nThe following example builds on the previous method to get the server time, and adds a [c]format[/c] parameter to select the format of the returned time:\n\n[code xml]\n<rpc:interface libname=\"jsonrpc.interface\">\n    <rpc:method name=\"time\">\n        <rpc:parameter name=\"format\" type=\"string\" default=\"medium\" required=\"yes\">\n            Time format to return\n        </rpc:parameter>\n        <return-str>${.now::format}</return-str>\n    </rpc:method>\n</rpc:interface>\n[/code]\n\nIf can now call this method with [c]format[/c] set to a datetime format, such as [c]'YYYY mm dd'[/c]\n\n[h2]Errors[/h2]\n\nYou can return an error response with the [tag jsonrpc]error[/tag] tag which sets the error message, an error code with the [c]code[/c] attribute, and optional message data with the [c]data[/c] attribute. An [tag jsonrpc]error[/tag] acts like a return and immediately stops processing the method.\n\nFor example, lets say we want to restrict the format parameter on the gettime example to one of four standard formats: [c]short[/c], [c]medium[/c], [c]long[/c], and [c]full[/c]. We could add the following to the method, before the call to [tag]return-str[/tag]:\n\n[code xml]\n<rpc:error code=\"100\" if=\"format not in ['short', 'medium', 'long', 'full']\">\n    Format parameter is not correct\n</rpc:error>\n[/code]\n\nNumerical error codes can be hard to keep track of, especially when the number of methods grows. To manage error codes, you can use an enumeration to map the integer on to a label. Here's how to create an enumeration the previous error:\n\n[code xml]\n<enum libname=\"enum.jsonrpc.errors\">\n    <value id=\"100\" label=\"bad_time_format\">\n        The format for the time method should be on of: 'short', 'medium', 'long', 'full'\n    </value>\n</enum>\n[/code]\n\nError enumerations also make it possible for the auto-generated docs to list the error codes in a table.\n\nTo use this enumeration, set it on the the [tag jsonrpc]interface[/tag] with the [c]errors[/c] attribute. Then you can replace the error code [c]100[/c] with its corresponding label, [c]bad_time_format[/c]. Here's the complete [c]gettime[/c] method:\n\n[code xml]\n<rpc:interface libname=\"jsonrpc.interface\">\n\n    <enum libname=\"enum.jsonrpc.errors\">\n        <value id=\"100\" label=\"bad_time_format\">\n            The format for the time method should be one of: 'short', 'medium', 'long', 'full'\n        </value>\n    </enum>\n\n    <rpc:method name=\"time\">\n        <rpc:parameter name=\"format\" type=\"string\" default=\"medium\" required=\"yes\">\n            Time format to return\n        </rpc:parameter>\n        <rpc:error code=\"bad_time_format\" if=\"format not in ['short', 'medium', 'long', 'full']\">\n            Format parameter is not correct\n        </rpc:error>\n        <return-str>${.now::format}</return-str>\n    </rpc:method>\n\n</rpc:interface>\n[/code]\n\n[h1]Logging[/h1]\n\nMoya JSON-RPC writes information about each call and it's return value to the logger, [c]moya.jsonrpc[/c]. See [doc logging] for information on configuring the logging system.\n\n[h1]Javascript[/h1]\n\nThe Moya JSON-RPC library comes with a [url http://jquery.com/]JQuery[/url] plugin to call remote methods from Javascript.\n\n[aside]Any other Javascript client should work with Moya JSON-RPC.[/aside]\n\nTo load the JS file you can add the following to your content:\n\n[code xml]\n<include-js from=\"moya.jsonrpc\" path=\"js/jsonrpc.js\" />\n[/code]\n\nAlternatively, you can add the following to your template:\n\n[code moyatemplate]\n<script type=\"text/javascript\" src=\"{% media 'js/jsonrpc.js' from 'moya.jsonrpc' %}\"></script>\n[/code]\n\nThis makes available a class called [c]JSONRPC[/c], which you can create as follows:\n\n[code js]\nvar rpc = new JSONRPC('/jsonrpc/');\n[/code]\n\nThe constructor takes the URL of the JSON-RPC server, and an optional object containing default callbacks.\n\n[definitions]\n\n[define \"\"success\"\"]\n[c]function success(result){}[/c][br]\nCalled when the remote method executes successfully.\n[/define]\n\n[define \"\"error\"\"]\n[c]function error(response) {}[/c][br]\nCalled when the remote method returns an error code.\n[/define]\n\n[define \"\"failure\"\"]\n[c]function failure(jqXHR, textStatus, errorThrown) {}[/c][br]\nCalled when there is a error making the remote call (and no remote method was called).\n[/define]\n\n[define \"\"complete\"\"]\n[c]function complete() {}[/c][br]\nCalled when the the call completes (regardless of whether it was successful), prior to other callbacks. This may be used to disable a [i]throbber[/i], for example.\n[/define]\n\n[/definitions]\n\n[h2]Calls[/h2]\n\nYou can make calls with the [c]call[/c] method, which takes the method name, followed by the parameters and a function that processes the result. Here's an example which gets the time with the remote [c]gettime[/c] method we created:\n\n[code js]\nrpc.call('gettime',\n        {'format': 'long'},\n        function(result){\n            alert(\"The time is: \" + result);\n        });\n[/code]\n\nYou can also add an optional callbacks object as the fourth parameter, which can have the same callback functions as the constructor. Any callbacks supplied to the [c]call[/c] method will override those set in the constructor.\n\n[h2]Notifications[/h2]\n\nAn alternative to [c]call[/c] is the [c]notify[/c] method which sends [i]notifications[/i]. Notifications are remote calls where you aren't interested in the result. This is reflected in the [c]success[/c] parameter which will be invoked with no parameters.\n\n[h2]Batch Calls[/h2]\n\nYou can make [i]batch[/i] calls (multiple calls in a single requests) by calling [c]createBatch[/c] method which returns a new [c]JSONRPCBatch[/c] object. You may then use the [c]call[/c] and [c]notifiy[/c] methods on the batch object to store a list of method calls, and send then to the server with [c]JSONRPC.batch[/c]. Here's an example that calls the [c]gettime[/c] method with two different parameters, in a single request.\n\n[code js]\n/* make a batch object */\nvar batch = rpc.createBatch();\nfunction log_time(result)\n{\n    console.log(result);\n}\n/* Add calls to batch */\nbatch.call('gettime', {'format':'medium'}, log_time);\nbatch.call('gettime', {'format':'short'}, log_time);\n/* send calls to server and invoke callbacks */\nrpc.batch(batch);\n[/code]\n",
        "name": "jsonrpc",
        "docmap": [
            [
                1,
                "Installation"
            ],
            [
                1,
                "Namespace"
            ],
            [
                1,
                "Interfaces"
            ],
            [
                1,
                "Methods"
            ],
            [
                2,
                "Documenting Methods"
            ],
            [
                2,
                "Parameters"
            ],
            [
                2,
                "Errors"
            ],
            [
                1,
                "Logging"
            ],
            [
                1,
                "Javascript"
            ],
            [
                2,
                "Calls"
            ],
            [
                2,
                "Notifications"
            ],
            [
                2,
                "Batch Calls"
            ]
        ],
        "title": "Moya JSON-RPC"
    },
    "id": "doc.jsonrpc"
}