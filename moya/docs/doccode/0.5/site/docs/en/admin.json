{
    "name": "admin",
    "doc_namespace": "doc",
    "doc_class": "doc",
    "references": [
        "doc.index"
    ],
    "data": {
        "body": "[title Moya Admin]\n\nMoya Admin creates a fully features [i]administration[/i] site, which allows users (with admin permissions) to query and manage objects stored in the database.\n\n[h1]Installation[/h1]\n\nThe Moya Admin library is built in to Moya and may be imported via its Python path as follows:\n\n[code xml]\n<import py=\"moya.libs.forms\"/>\n[/code]\n\nThe above line should be in your [tag]server[/tag] declaration.\n\nYou can install the library with the following:\n\n[code xml]\n<install name=\"admin\" lib=\"moya.admin\" mount=\"/admin/\" />\n[/code]\n\nThis will install Moya Admin and mount it on [b]/admin/[/b].\n\n[aside]If you created your project with [b]moya start[/b] then Moya Admin will have been installed automatically.\n\n[h1]Namespace[/h1]\n\nMoya Admin uses the namespace [c]http://moyaproject.com/admin[/c].\n\n\n[h1]Introduction[/h1]\n\nIf you visit the admin site (on /admin/) you will see a list of [i]modules[/i] in a panel. These are headings which contain a sub-menu of table views which display objects stored in the database. From a table view you can search the database for a particular object, and also create / edit / delete items from the database.\n\nLibraries can advertise what modules / tables they support and customize admin functionality as well as look and feel. You won't need to do any particular configuration for a library to use the admin sites; installing a library is enough to register with the admin sites.\n\n[h1]Modules[/h1]\n\nA library can [i]advertise[/i] the modules it wishes to add to the admin site by adding a [tag admin]module[/tag] tag anywhere in the library code -- by convention in a file called [c]admin.xml[/c]. There is typically only one module per application, but it is entirely possible to have more than one.\n\nHere's how you might create a module in your library:\n\n[code xml]\n<module xmlns=\"http://moyaproject.com/admin\"\n    slug=\"sushi-shop\" title=\"Sushi Shop\" description=\"Manage Sushi Products\">\n</module>\n[/code]\n\nThis will create a link in the admin panel using these details. If you click on a module link in admin (as apposed to just expanding the menu), you will see a simple title page. You can customize this page by setting the [c]content[/c] attribute to your new content. Your custom content should extend [c]moya.admin#content.cover[/c], and contain a section called [c]content[/c]. Here's an example:\n\n[code xml]\n<module xmlns=\"http://moyaproject.com/admin\" content=\"content.custom.admin\"\n    slug=\"sushi-shop\" title=\"Sushi Shop\" description=\"Manage Sushi Products\">\n</module>\n\n<content libname=\"content.custom.admin\" extends=\"moya.admin#content.cover\">\n    <section name=\"content\">\n        <markdown>\nSushi Shop\n==========\n\nGet your sushi here!\n        </markdown>\n    </section>\n</content>\n\n[/code]\n\n\nA [tag admin]module[/tag] should contain one or more [tag admin]link[/tag] tags. These reference [tag admin]table[/tag] tags which define a table view. See the next section for an overview of defining tables.\n\n[h1]Tables[/h1]\n\nTables are advertised with the [tag admin]table[/tag] tag which sets the [c]title[/c]. [c]slug[/c], and [c]model[/c] for the table view. The model should be a reference to the [tag db]model[/tag] you want to list in the table.\n\nWithin the [tag admin]table[/tag] should be a sequence of [tag admin]column[/tag] tags which define the columns to be displayed in the table. Here's an example of a table definition with two columns:\n\n[code xml]\n<table libname=\"admintable.products\" slug=\"products\"\n    title=\"Sushi Products\" model=\"#Product\">\n\n    <column title=\"Product\" sort=\"name\">${object.name}</column>\n    <column title=\"Stock\" sort=\"stock\">${object.stock} piece(s)</column>\n\n</table>\n[/code]\n\nWhen Moya Admin renders a table, it iterates through each object in the database and creates table cells from the [tag admin]column[/tag] tags, to which it passes the current object as a value called [c]object[/c]. Columns may contain simple expressions, for example [c]${object.name}[/c] to display the [c]name[/c] field of the database object, or, any other content tags. This makes tables infinitely customizable as you can put text, images, widgets, forms or any other renderable content inside a cell.\n\nTo display this table in the modules panel, you would add a [tag admin]link[/tag] to your module definition. Here's how to add the products table to the Sushi Shop model:\n\n[code xml]\n<module xmlns=\"http://moyaproject.com/admin\"\n    slug=\"sushi-shop\" title=\"Sushi Shop\" description=\"Manage Sushi Products\">\n    <link to=\"admintable.products\" title=\"Products\"/>\n</module>\n[/code]\n\n[h1]Searching[/h1]\n\nYou can add a search field to the table by setting the [c]search[/c] attribute on the [c]table[/c]. This should be a [link db#database-expressions]database expression[/link] referencing the value [c]q[/c] which contains the text the user searched for. Here's how we would add search capabilities to the Sushi Products table:\n\n[code xml]\n<table libname=\"admintable.products\" slug=\"products\"\n    search=\"#Product.name == q\"\n    title=\"Sushi Products\" model=\"#Product\">\n\n    <column title=\"Product\" sort=\"name\">${object.name}</column>\n    <column title=\"Stock\" sort=\"stock\">${object.stock} piece(s)</column>\n\n</table>\n[/code]\n\nThe db expression, [c]#Product.name == q[/c] matches all products a name field set to the search query. You can use a more complicated db expression to search multiple fields, or to do more relaxed queries. For instance [c]#Product.name icontains q[/c], would match any products with a name containing the search substring.\n\n[h1]Filtering[/h1]\n\nBy default, Moya Admin will list all objects of the specified type in the table. It is also possible to restrict the query to objects matching a db expression. You might want to do this if you want several tables, each showing a different subset of objects. To filter objects in a table, set the [c]filter[/c] attribute to a db expression. Here's how you would create a table view that displayed only the sushi products in stock:\n\n[code xml]\n<table libname=\"admintable.products_in_stock\" slug=\"products_on_stock\"\n    search=\"#Product.name == q\"\n    description=\"Products in stock\"\n    filter=\"#Product.stock gt 0\"\n    title=\"Sushi Products\" model=\"#Product\">\n\n    <column title=\"Product\" sort=\"name\">${object.name}</column>\n    <column title=\"Stock\" sort=\"stock\">${object.stock} piece(s)</column>\n\n</table>\n[/code]",
        "name": "admin",
        "docmap": [
            [
                1,
                "Installation"
            ],
            [
                1,
                "Namespace"
            ],
            [
                1,
                "Introduction"
            ],
            [
                1,
                "Modules"
            ],
            [
                1,
                "Tables"
            ],
            [
                1,
                "Searching"
            ],
            [
                1,
                "Filtering"
            ]
        ],
        "title": "Moya Admin"
    },
    "id": "doc.admin"
}