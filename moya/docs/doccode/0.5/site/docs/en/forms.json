{
    "name": "forms",
    "doc_namespace": "doc",
    "doc_class": "doc",
    "references": [
        "doc.index"
    ],
    "data": {
        "body": "[title Moya Forms]\n\nForms are an essential part of any web application, as they are the primary way in which a user will interact with your site. Poorly implemented forms can have a significant negative impact on the user experience. Enough to put a user off using your site at all -- so it is important to do forms well.\n\nIt is possible to build forms [i]from scratch[/i] with Moya, but the Moya Forms library will accelerate designing, rendering, and processing of forms -- without restricting customization.\n\n[h1]Installation[/h1]\n\nThe Moya Forms library is built in to Moya and may be imported via its Python path as follows:\n\n[code xml]\n<import py=\"moya.libs.forms\"/>\n[/code]\n\nThe above line should be in your [tag]server[/tag] declaration.\n\nYou can install the library with the following:\n\n[code xml]\n<install name=\"forms\" lib=\"moya.forms\"/>\n[/code]\n\nNote that the library isn't [i]mounted[/i] anywhere, because no views are required to use forms. Installing the library makes a number of custom tags available (which we will cover here).\n\n[aside]If you created your project with [b]moya start project[/b], the forms library will have been pre-installed.[/aside]\n\n[h2]Test Forms[/h2]\n\nThe forms library comes with a test view which show the various form controls you can use. These are not intended for production, but if you are interested, you can mount them by adding the following to your [c]server.xml[/c]:\n\n[code xml]\n<mount app=\"forms\" url=\"/forms/\" mountpoint=\"tests\" />\n[/code]\n\nYou can now visit [url http://127.0.0.1:8000/forms/tests/]http://127.0.0.1:8000/forms/tests/[/url] to have a look at the test forms.\n\n[h2]Form Namespace[/h2]\n\nForms tags use the XML [link xml#namespaces]namespace[/link] [c]http://moyaproject.com/forms[/c].\n\nYou will probably find it easiest to add [c]xmlns=\"http://moyaproject.com/forms\"[/c] to your [tag forms]form[/tag] declarations, so that you won't need a prefix for every field. For form tags [i]not[/i] inside a [tag forms]forms[/tag] tag, you can add [c]xmlns:forms=\"http://moyaprojects.com/forms\"[/c] to the top level [tag]moya[/tag] tag, to enable the [c]forms[/c] namespace prefix.\n\n[h1]Designing Forms[/h1]\n\nThe [tag]form[/tag] tag begins a [i]form definition[/i]. This is where you tell the Moya Forms library what fields should be in your form, how to display the form, and also how to validate the input. Let's have a look at a simple login form:\n\n[code xml]\n<form libname=\"form.login\" legend=\"Please login\" xmlns=\"http://moyaproject.com/forms\">\n    <input name=\"username\" label=\"Username\" type=\"text\" maxlength=\"30\" required=\"yes\"/>\n    <password name=\"password\" label=\"Password\" maxlength=\"30\" required=\"yes\"/>\n    <submit-button text=\"Login\" />\n</form>\n[/code]\n\nThis form has the libname [c]\"form.login\"[/c], which will be required when we come to process / render the form. The prefix of [c]\"form.\"[/c] is a convention which helps to keep forms distinct from other elements. The optional [c]legend[/c] attribute is a human readable text displayed as a header in the form.\n\nThe tags inside the [tag]form[/tag] define the contents of the form. The form above has an input box for a username, a password input for the password, and a button to submit the form; but any combination of the supported [link forms#field-tags]fields and controls[/link] possible. The attributes of field tags are used to customize the field and how it is validated. In the input and password fields there is a [c]maxlength[/c] attribute which restricts the number of characters the user may type, and a boolean attribute called [c]required[/c] which can tell Moya that the user must enter [i]something[/i] in order to submit the form.\n\nThere are a number of other field tags to create the common fields expected in web forms. See [link forms#field-tags]Field Tags[/link] for details.\n\n[h2]Extending[/h2]\n\nForms may be [i]extended[/i] so that they inherit the fields from another form. You might want to do this if you have two forms that differ only by the text on the submit button (for example): Here's an example of a defining two forms extending from a common base:\n\n[code xml]\n<form libname=\"form.post.base\">\n    <input name=\"title\" label=\"Title\" required=\"yes\"/>\n    <text name=\"text\" required=\"yes\"/>\n</form>\n\n<form libname=\"form.post.new\" legend=\"New Post\" extends=\"#form.post.base\">\n    <submit-button text=\"Create\"/>\n</form>\n\n<form libname=\"form.post.edit\" legend=\"Edit Post\" extends=\"#form.post.base\">\n    <submit-button text=\"Edit\"/>\n</form>\n[/code]\n\nThe first form with libname [c]\"form.post.base\"[/c] isn't used directly. The following two forms both extend the base form and inherit the [c]title[/c] and [c]text[/c] fields. The forms doing the extending need only add the fields that are not in the base. In this case, they add an appropriate submit button.\n\n[h1]Working with Forms[/h1]\n\nThe first step in working with a Moya form, wether it's to process a POST request or to render the form HTML, is to get a form object for your [tag]{forms}form[/tag]. You do this with [tag]{forms}get[/tag] which takes the libname of the form in the [c]form[/c] attribute. Here is an example:\n\n[code xml]\n<forms:get form=\"#form.login\" dst=\"login_form\" />\n[/code]\n\nThe value [c]login_form[/c] now contains a [link form-object-reference]form object[/link]. It is this form object you work with when you come to process or render the form.\n\n\n[h2]Form Parameters[/h2]\n\nIt is important to note that the call to [tag forms]get[/tag] invokes the code inside the [tag forms]form[/tag] much like a macro -- you may even put breakpoints inside a form and step through each field tag a line at a time. You can also pass parameters to the form in order to customize it. For example, an alternative to extending a base form in order to customize the submit button text might be to supply the button text as a parameter. The following code sets the submit button text to the value of a variable called [c]button_text[/c].\n\n[code xml]\n<form libname=\"form.login\" legend=\"Please login\" xmlns=\"http://moyaproject.com/forms\">\n    <input name=\"username\" label=\"Username\" type=\"text\" maxlength=\"30\" required=\"yes\"/>\n    <password name=\"password\" label=\"Password\" maxlength=\"30\" required=\"yes\"/>\n    <submit-button text=\"${button_text}\" />\n</form>\n[/code]\n\nHere's how you would supply the button text when you get the form object:\n\n[code xml]\n<forms:get form=\"#form.login\" dst=\"form\" let:button_text=\"'Much Login'\"/>\n[/code]\n\nForm parameters may be used for more advanced customization, as well as to change text. The following creates a form with a definable number of address fields:\n\n[code xml]\n<form libname=\"form.address\" legend=\"Enter your address\" xmlns=\"http://moyaproject.com/forms\">\n    <moya:for src=\"1...(lines)\" dst=\"line_no\">\n        <input name=\"address${line_no}\" maxlength=\"50\"/>\n    </moya:for>\n    <submit-button text=\"Submit\" />\n</form>\n[/code]\n\n[aside]Note the use of the [b]moya:[/b] prefix on the for tag above. This is because we are in the forms namespace and the [tag]for[/tag] tag is defined in the default namespace. For this to work, you need to add [b]xmlns:moya=\"http://moyaproject.com\"[/b] to the top level tag.[/aside]\n\nThis form requires that the form parameter [c]lines[/c] has been passed to it. The [tag]for[/tag] tag repeats the [tag forms]input[/tag] the given number of times, adjusting the [c]name[/c] attribute each time to create fields called [c]address1[/c], [c]address2[/c] etc.\n\nFor example, the following retrieves a form object with [i]4[/i] address fields:\n\n[code xml]\n<forms:get form=\"#form.address\" dst=\"form\" let:lines=\"4\"/>\n[/code]\n\n[aside]Extending and form parameters may be used together.[/aside]\n\n[h1]Rendering Forms[/h1]\n\nForm objects are [i]renderable[/i] (Moya knows how to turn them in to HTML). You can render a form object with the [tag]render[/tag] tag in a [tag]content[/tag] definition, or by using the [c]{% render %}[/c] template tag.\n\nThe following is an example of rendering a form in content:\n\n[code xml]\n<view libname=\"view.login\" content=\"#content.login\">\n    <forms:get form=\"form.login\" dst=\"login_form\"/>\n</view>\n\n<content libname=\"content.login\" template=\"login.html\">\n    <title>Log In</title>\n    <section name=\"body\">\n        <render src=\"login_form\"/>\n    </section>\n</content>\n[/code]\n\nRendering a form object in a template is similar:\n\n[code xml]\n<view libname=\"view.login\" template=\"login.html\">\n    <forms:get form=\"form.login\" dst=\"login_form\"/>\n</view>\n[/code]\n\n[code moyatemplate]\n<!-- login.html -->\n<div id=\"body\">\n<h1>Please fill in the following form</h1>\n    {% render login_form %}\n</div>\n[/code]\n\nRendering forms in this way generates HTML from templates in the Moya Forms library. A number of different styles are supported, from a list of fields in a table to Bootstrap style forms. This is often all you'll need and makes generating the markup effortless, but you can customize the HTML generation on a number of levels, or render the HTML form manually and use Moya Forms for processing only.\n\n\n[h2]Form Styles[/h2]\n\nThe [tag forms]form[/tag] tag has an attribute, [c]style[/c], which can be used to select one of a styles for the the form markup. The [tag forms]get[/tag] tag also has a [c]style[/c] attribute which will override the [c]style[/c] on the [tag forms]form[/tag] tag.\n\n[aside]Some of the styles assume [url http://getbootstrap.com]twitter bootstrap[/url] markup. Using Bootstrap will help you display nice looking forms with minimal effort, but you aren't required to use Bootstrap if you want to provide your own stylesheets.[/aside]\n\nThe following is a list of the builtin styles:\n\n[definitions]\n\n[define basic]\nThe [c]basic[/c] style renders the form with basic [url http://getbootstrap.com/css/#forms]bootstrap markup[/url].\n[/define]\n\n[define horizontal]\nThe [c]horizontal[/c] style renders the form with a [url http://getbootstrap.com/css/#forms-horizontal]bootstrap horizontal[/url] layout.\n[/define]\n\n[define inline]\nThe [c]inline[/c] style renders the form with a [url http://getbootstrap.com/css/#forms-inline]bootstrap inline[/url] layout.\n[/define]\n\n[define paragraphs]\nThe [c]paragraphs[/c] style renders the form with a controls in [c]<p>[/c] tags.\n[/define]\n\n[define simple]\nThe [c]simple[/c] style renders the form as a sequence of labels and controls.\n[/define]\n\n[define table]\nThe [c]table[/c] style renders the form as a table with two columns; the first column contains the label and the second column contains the control.\n[/define]\n\n[/definitions]\n\n[h2]Form Templates[/h2]\n\nMoya uses templates to render forms and controls. These may be customized by overriding the templates in the usual way.\n\nWhen Moya renders the form, it generates a path from [c]/moya.forms/styles/{style}/form.html[/c], where [c]{style}[/c] is the style specified on the [tag forms]form[/tag] or [tag forms]get[/tag]. For example, if the style was [c]basic[/c], Moya would render the form [c]/moya.forms/styles/basic/form.html[/c].\n\nThe form template is passed the form object (simply called [c]form[/c]) and renders the HTML [c]<form>[/c] and related markup. The form template also loops through the fields in the form and renders them. The template paths for fields are generated from [c]/moya.forms/styles/{style}/fields/{fieldname}.html[/c], where [c]{style}[/c] is the form style, and [c]{fieldname}[/c] is the name of the field. Field templates may also be overriden if you want to customize how a field is rendered.\n\nYou can see the default templates used by the forms library with the following command:\n\n[code]\n$ moya fs templates --tree /moya.forms/\n[/code]\n\nIf you override any of the templates, it will change how forms or fields are rendered across your entire application. You may also customize a form or field template individually, with the [c]template[/c] attribute (on the [tag forms]form[/tag] or [link forms#field-reference]field tags[/link]) which takes a path to your custom template.\n\n[h2]Custom Styles[/h2]\n\nYou are not limited to the builtin form styles. If you want to define a new style entirely, you can add the template(s) under the path [c]/moya.forms/styles/{style}[/c] (in templates fs) where [c]{style}[/c] is the name of your custom style.\n\nSee any of the existing form templates as a guide how to render a custom form style. You display any of the builtin form templates with the [c]moya fs[/c] command. Here's an example:\n\n[code]\n$ moya fs templates --cat /moya.forms/styles/basic/form.html\n[/code]\n\n[h2]Manual Rendering[/h2]\n\nAn alternative to using the built-in form templates is to set a custom template on the form object that does all the rendering. You may lose the ability to add and remove fields easily to the HTML, but form processing and validation remains the same.\n\nTo set a custom template, you may either set a [c]template[/c] attribute on the [tag]{forms}form[/tag] object, or override it in the [tag]{forms}get[/tag] tag. Then when Moya renders the form object, it will render the custom template with the form object (passed to the template as [c]form[/c]).\n\nHere's an example of setting a custom template on a form object:\n\n[code xml]\n<forms:get form=\"form.login\" template=\"custom_login_form.html\"/>\n[/code]\n\nYou can then render the form object in a template:\n\n[code xml]\n<!-- custom_login_form.html -->\n<form action=\"${form.action}\">\n    <input type=\"text\" name=\"username\" value=\"${form.fields.username.value}\"/>\n    <!-- render other fields... -->\n</form>\n[/code]\n\nThe custom emplate has access to all the parameters of the [link forms#form-object-reference]form object[/link], which you can use to insert information defined in the [tag]form[/tag]\n\nAn alternative to rendering the form object is just to render the HTML for a form directly in your template.\n\n[h2]Form Content[/h2]\n\nMoya forms are actually a specialized form of [link content]content[/link]; when you add a field to a form you are also adding associated content information. Because of this, non-form related content tags will also work inside a [tag forms]form[/tag]. You can use this to insert additional widgets, text, and images, for example. Content tags may also contain form field tags, which will be rendered normally, without breaking form functionality.\n\nFor example, let's say we want to wrap the username and password fields from the login form in a HTML div with an additional style. We can put the two fields inside a [tag]node[/tag] which references a template:\n\n[code xml]\n<form libname=\"form.login\" legend=\"Please login\" xmlns=\"http://moyaproject.com/forms\">\n    <moya:node template=\"highlight.html\">\n        <input name=\"username\" label=\"Username\" type=\"text\" maxlength=\"30\" required=\"yes\"/>\n        <password name=\"password\" label=\"Password\" maxlength=\"30\" required=\"yes\"/>\n    </moya:node>\n    <submit-button text=\"Login\" />\n</form>\n[/code]\n\n[aside]Note the use of the [b]moya:[/b] prefix on the node tag. This is because the node tag is not in the forms namespace.[/aside]\n\nWhen the above form is rendered, it will render the template [c]highlight.html[/c]:\n\n[code moyatemplate]\n<div class=\"highlight\">{% children %}</div>\n[/code]\n\nThis template wraps it's children with an HTML div which may be styled independently.\n\n[h2]Custom Fields[/h2]\n\nMoya includes a standard array of form inputs (see [link forms#field-reference]Field Reference[/link]), but there may be situations where you want to create entirely custom field tags either to change look and feel or to provide functionality that plain old HTML doesn't support. In these situations you can use the [tag forms]field[/tag] tag which registers the field with the form system (to enable validation etc.), but doesn't add any content of it's own. You can tell Moya how to render the field by adding the appropriate content tag(s) inside the [tag forms]field[/tag].\n\nFor instance, Moya comes with a builtin library to embed a rich text editor (supporting bold / italic / links etc), which may be used in place of text area fields (see [link forms#text-area]text-area[/link]). To use it, add the following lines to your [tag]server[/tag]:\n\n[code xml]\n<import py=\"moya.libs.wysihtml5\" />\n<install name=\"wysihtml5\" lib=\"moya.wysihtml5\" />\n[/code]\n\n[aside]You won't need this step if you created the project with [b]moya start project[/b].[/aside]\n\nThen add the XML namespace declaration [c]xmlns:wysihtml5=\"http://moyaproject.com/wysihtml5\"[/c] to the file containing your form. Now you can replace [tag forms]text-area[/tag] tags with the following:\n\n[code xml]\n<field name=\"content\" label=\"Rich Content\">\n    <wysihtml5:editor/>\n</field>\n[/code]\n\nWhen the form is rendered it will display the rich editor containing markup from the form data (in [c]form.content[/c]). The user may edit the HTML without ever seeing markup.\n\nThis works because when the [tag forms]field[/tag] tag is rendered it inserts a value called [c]field[/c] in to the context. The [c]field[/c] value which contains information about the field -- such as [c]field.name[/c]. The editor widget imports the CSS and JS required to make the editor work, and writes HTML in to an input when the form is submitted. The field may [link forms#field-validation]validated[/link] as if it were one of the standard fields.\n\n[h1]Processing Forms[/h1]\n\nWhen you get a form object during a POST request, Moya will fill in the field information from the POST data. A form that has been filled in (or [i]bound[/i]) can then be [i]validated[/i].\n\nValidating a form runs any checks on the fields, and generates error messages for fields that fail a check. The error messages are displayed when the form object is rendered, along with styles to highlight errors.\n\nTo validate a form, use the [tag forms]validate[/tag] tag, which accepts a single attribute, [c]src[/c], which should be your form object. If the form validates successfully, Moya will execute the code within the [tag forms]validate[/tag] tag. This is where you would put the code to handle a valid form. The following code demonstrates how you might handle a login form:\n\n[code xml]\n<view libname=\"view.login\" content=\"#content.login\">\n    <forms:get form=\"#form.login\" dst=\"form\"/>\n    <forms:validate src=\"form\">\n        <auth:login username=\"form.data.username\" password=\"form.data.password\"/>\n        <redirect-to url=\"/\"/>\n    </forms>\n</view>\n[/code]\n\nWhen a form validates successfully it will have the value [c]ok[/c] set to [c]True[/c]. A valid form will also contain a dictionary of the data in the [c]data[/c] attribute. We can see that the view above retrieves the username and password from the form with [c]form.data.username[/c] and [c]form.data.password[/c].\n\nIf the form doesn't validate (i.e. contains errors) then the form object may be passed to the content and rendered normally. Error messages will be displayed next to the appropriate fields.\n\n[h2]Populating Forms[/h2]\n\nYou can pre-populate a form with values by setting the [c]src[/c] attribute of [tag forms]get[/tag], which should refer to an object containing attributes with the same names as the form fields (such as a database object). The following code shows how we could prepopulate the login form with an existing username:\n\n[code xml]\n<forms:get form=\"#form.login\" dst=\"form\" src=\"{'username': 'john'}\" />\n[/code]\n\nWhen this form is rendered, the text of the username field will be populated with the value [c]'john'[/c].\n\nBy default [tag]{forms}get[/tag] will pre-populate values based on the [c]name[/c] attribute of the field. If you want to prepopulate a differently named value from the src object, you can set an alternative name in the field's [c]src[/c] attribute.\n\nFor example, here is an alternative login form. Note the [c]src[/c] attribute on the first field:\n\n[code xml]\n<form libname=\"form.login\" legend=\"Please login\" xmlns=\"http://moyaproject.com/forms\">\n    <input name=\"username\" src=\"alt_name\" label=\"Username\" type=\"text\" maxlength=\"30\" required=\"yes\"/>\n    <password name=\"password\" label=\"Password\" maxlength=\"30\" required=\"yes\"/>\n    <submit-button text=\"${button_text}\" />\n</form>\n[/code]\n\nWith the above form, the username field can be prepopulated with a value called [c]alt_name[/c]: \n\n[code xml]\n<forms:get form=\"#form.login\" dst=\"form\" src=\"{'alt_name': 'john'}\" />\n[/code]\n\nYou can also tell moya to not prepopulate a field by setting the fields [c]src[/c] attribute to an empty string. For an example:\n\n[code xml]\n<password name=\"password\" src=\"\" label=\"Password\" maxlength=\"30\" required=\"yes\"/>\n[/code xml]\n\nThis will prevent the password field from being pre-populated, even if value exists for [c]password[/c].\n\nNote that if a form is being rendered after a POST request it will be populated with data from the POST, which will likely be the result of the user having filled in the form. Data from the POST will take precedence over data from the [tag]{forms}get[/tag] tag.\n\n[h2]Processing Fields[/h2]\n\nValues set on the form with the [c]src[/c] attribute are converted to text when the template is rendered. Moya will do this automatically, but you may define a custom text representation of a src value by supplying a [c]process[/c] attribute on its field. This attribute should be an expression which takes the value from the [c]src[/c] (simply called [c]value[/c]) and returns a string. For instance, the default behavior would be equivalent to setting [c]process=\"str:value\"[/c] on every field.\n\nOne use for processing fields, is to define what happens when a value in the [c]src[/c] object is [c]None[/c], which may occur on a database object with a null field. The default behavior would be to convert the value [c]None[/c] to the string [c]'None'[/c], which is unlikely to be what you want in a form.\n\nFor instance, lets say we have a field [c]count[/c] in a database object which could be None, and we would like to show this as [c]0[/c] in a form. We could define a [c]process[/c] attribute on the [tag forms]input[/tag] as follows:\n\n[code xml]\n<forms:input type=\"number\" name=\"count\" src=\"count\" process=\"isnone:value ? '0' : str:value\"/>\n[/code]\n\nNow when you render the form a value of [c]None[/c] for [c]Count[/c] will be converted to the text [c]0[/c].\n\n[h2]Field Validation[/h2]\n\nMost forms will require some kind of validation of the user's input, beyond marking a field as required. This is done with the [tag forms]validate-field[/tag] tag which should be inside the [tag forms]form[/tag] definition.\n\nThe [tag forms]validate-field[/tag] tag takes a single attribute, [c]field[/c], which should be the name of the field you want to validate. When the form is validated (with [tag forms]validate[/tag]), Moya calls the code inside any [tag forms]validate-field[/tag] tags, which may report validation errors with [tag forms]fail[/tag]. Here's an example which validates an email field:\n\n[code xml]\n<!-- inside a form -->\n<form:validate-field field=\"email\">\n    <fail if=\"'@' not in value\">\n        Doesn't appear to be an email\n    </fail>\n</form:validate-field>\n[/code]\n\nWhen the form containing the above code is validated, Moya invokes the [tag forms]validate-field[/tag] tag with a parameter, [c]value[/c], which contains the text entered by the user. If there is no [b]@[/b] symbol in the email field, then the [tag forms]fail[/tag] tag will cause the validation to fail and set an error message on the field. The form will only validate if all [tag forms]validate-field[/tag] run without any fails.\n\n[aside]For more precise validation of email addresses, you could use [link expressions#regular-expressions]regular expressions[/link] or the [link expressions#isemail]isemail:[/link] modifier.[/aside]\n\nIt is possible for field validation to refer to more than a single field. For example, in a user sign-up form it's common to have two email fields in order to confirm the user has entered their email correctly (if the fields don't match, the user must have made a typo). In these situations, you can refer to the other fields with the [c]values[/c] dictionary, which is also passed to [tag forms]validate-field[/tag]. Here's an example:\n\n[code xml]\n<validate-field field=\"email2\">\n    <fail if=\"values.email != value\">\n        Email fields do not match\n    </fail>\n</validate-field>\n[/code]\n\nThe above code assumes there are two email fields, called [c]email[/c] and [c]email2[/c]. The [tag forms]validate-field[/tag] tag applies to the second email field, and checks that its value (stored in [c]value[/c]) matches what the user entered in the first email input (stored in [c]values.email[/c]). Note that the expression [c]values.email != values.email2[/c] would work equally well.\n\n[h2]Setting Errors[/h2]\n\nYou may set error information on the form outside of the usual validate process with the [tag forms]error[/tag] tag, which takes the form as input, and uses the enclosed text as the error message. The [tag forms]error[/tag] can set an error message that applies to the form (typically displayed above the controls) [i]or[/i] error messages that apply to a particular field, with the [c]field[/c] attribute. For example, the following code would set error text for a login form:\n\n[code xml]\n<forms:error src=\"form\">\n    Much login fail\n</forms:error>\n[/code]\n\nThe following sets an error message that applys to the [c]username[/c] field:\n\n[code xml]\n<forms:error src=\"form\" field=\"username\">\n    No such user!\n</forms:error>\n[/code]\n\n[h2]Adapting Form Data[/h2]\n\nThe data in a successfully validated form object is stored as text, which may not be convenient if we need it in a different format. We can tell Moya to further process (or [i]adapt[/i] successfully validated data with the [c]adapt[/c] attribute on field tags, which should be an expression which takes the field value (as [c]value[/c]) and returns the adapted value.\n\n[aside]Adapting is the logical reverse of processing the field data. See [link forms#processing-fields]Processing Fields[/link].[/aside]\n\nFor example, if we have an input that accepts a number, we may want to convert the value in the form data to an integer (rather than leave it as a string). Here's an example that adapts a field called [c]count[/c] by converting it to an integer.\n\n[code xml]\n<forms:input type=\"number\" name=\"count\" src=\"count\" adapt=\"int:value\" />\n[/code]\n\nYou can also adapt form data with the [tag forms]adapt-field[/tag] tag -- if you need to do more work than can fit in to a simple expression. When Moya processes the [c]adapt[/c] attributes it also invokes any code inside [tag forms]adapt-field[/tag], and will replace the field data with the return value. As with the [c]adapt[/c] attribute, the field being adapted is available as [c]value[/c]. Additionally, the code in [tag forms]adapt-field[/tag] is also passed a dictionary called [c]values[/c] (plural) which contains all the data from the form.\n\nHere's an example form containing a field called [c]title[/c] and a field called [c]slug[/c]. The field adapter in the form automatically generates the slug field from the title if it is left blank:\n\n[code xml]\n<form libname=\"form.post\" legend=\"New Post\" xmlns=\"http://moyaproject.com/forms\">\n    <input class=\"input-xxlarge\" name=\"title\" label=\"Post Title\" maxlength=\"60\" required=\"yes\"/>\n    <input class=\"input-xxlarge\" name=\"slug\" label=\"Slug\" maxlength=\"60\" required=\"no\"\n        inlinehelp=\"Leave blank to auto-generate a slug\" />\n    <adapt-field field=\"slug\">\n        <moya:return value=\"slug:values.title\" if=\"not value\"/>\n    </adapt-field>\n</form>\n[/code]\n\n[aside]A [i]slug[/i] is human readable text that may be included in a URL.[/aside]\n\n[h2]Applying forms[/h2]\n\nA common use-case for forms is to create or edit database objects, where the names of the fields map to an attribute on a model. For example, lets say we have a Post model that contains the fields, [c]title[/c], [c]slug[/c] and [c]text[/c]. We could design the following form to edit a single Post object:\n\n[code xml]\n<form libname=\"form.post.edit\" xmlns=\"http://moyaproject.com/forms\">\n    <input name=\"title\" maxlength=\"30\" required=\"yes\"/>\n    <input name=\"slug\" maxlength=\"30\" required=\"yes\"/>\n    <text name=\"text\" required=\"yes\" />\n</form>\n[/code]\n\nThe following code demonstrates how we might copy data from a successfully validated form to a model object:\n\n[code xml]\n<!-- assumes we have retrieved a 'post' object from the database -->\n<let post.title=\"form.data.title\"\n     post.slug=\"form.data.slug\"\n     post.text=\"form.data.text\" />\n[/code]\n\nThe above code is a perfectly valid way of processing a form, but it can get unwieldy if the form has a large number of fields. There may also be a lot of repetition if we have several views to edit different aspects of the model.\n\nTo simplify this kind of form, we can add a [c]dst[/c] attribute to field elements, which tells Moya how to [i]apply[/i] the form. The [c]dst[/c] attribute should be the name of an attribute on the object which will receive the form data. Here's how we would modify the post form to enable this feature:\n\n[code xml]\n<form libname=\"form.post.edit\" xmlns=\"http://moyaproject.com/forms\">\n    <input name=\"title\" maxlength=\"30\" required=\"yes\" dst=\"title\"/>\n    <input name=\"slug\" maxlength=\"30\" required=\"yes\" dst=\"slug\"/>\n    <text name=\"text\" required=\"yes\" dst=\"text\"/>\n</form>\n[/code]\n\nWith the addition of the [c]dst[/c] attributes, we can now [i]apply[/i] the form as follows:\n\n[code xml]\n<forms:apply src=\"form\" dst=\"post\" />\n[/code]\n\n[aside]If you don't specify [b]dst[/b] on field, Moya will used the [b]src[/b] attribute (since forms are often applied to the same type of object that they were populated from).[/aside]\n\n[h1]CSRF Protection[/h1]\n\nCross Site Request Forgery ([url http://en.wikipedia.org/wiki/Cross-site_request_forgery]CSRF[/url]) is a type of exploit where a form is submitted on behalf of a logged in user, without their knowledge. This is typically done by luring a user to a webpage and tricking them in to clicking on something that sends a pre-defined request to your web-application. It can also be done in some cases without even requiring the user to click on something.\n\nAn attacker can use this exploit to do things such as submitting SPAM comments, or potentially gaining access to their account entirely.\n\nMoya protects against the kind of exploit by adding a hidden field to forms. This field contains a special token which is generated when the form when it is first rendered. Moya can use this token to detect if the form wasn't generated by your web application.\n\nThe good news is that Moya does this automatically, and if you are using the forms system to generate your forms, you won't have to worry about it.\n\n[h2]How it Work[/h2]\n\nTo generate the CSRF token, Moya needs three pieces of information; the user's session id, the name of the form, and a 'secret' key which is unique to the project. The secret key is taken from the setting called 'secret' in the [raw][project][/raw] section of your settings, and should be a long string of random digits. If you used [c]moya start project[/c] to create your project, this will have been done for you.\n\nWhen you render a form, Moya inserts a [tag forms]hidden-input[/tag] with a name of [c]_moya_csrf[/c] containing then token. When you validate the form with [tag forms]validate[/tag], Moya checks this token. If it passes, the form is processed as normal (the csrf field is removed). If the token [i]doesn't[/i] match, Moya will return a forbidden response, which will typically redirect the user to the login page.\n\n[h2]Disabling CSRF[/h2]\n\nIf you have a form that doesn't change the state for a logged in user, then you can disable the CSRF check by setting [c]csrf=\"no\"[/c] on the form. You can also disable the CSRF check when the form is validated with the [c]csrf[/c] attribute on the [tag forms]validate[/tag] tag.\n\n[h2]Manual CSRF check[/h2]\n\nYou can also check the CSRF token without validating the form. The attribute [c]csrf_check[/c] on a form object will be set to [c]True[/c] if the form orignated from your web site or [c]False[/c] if it did not. When there is no user logged in, this value is set to [c]True[/c].\n\n\n[h1]Form Object Reference[/h1]\n\nForm objects contain a number of parameters which you can access in Moya Code, or in a template.\n\n[h2]Form Object[/h2]\n\nForm objects contain the following fields:\n\n[definitions]\n\n[define bound]\n    A boolean that indicates if the form is [i]bound[/i] (has POST data)\n[/define]\n\n[define data]\n    A dictionary of field data when a form was successfully *validated*\n[/define]\n\n[define error]\n    A string contain error text associated with the form\n[/define]\n\n[define errors]\n    A dictionary that maps field names on to a list of errors associated with the field\n[/define]\n\n[define fail]\n    A boolean that is True if there are any errors\n[/define]\n\n[define fields]\n    A list of form fields\n[/define]\n\n[define id]\n    A short string containing a unique indentfier\n[/define]\n\n[define ok]\n    A boolean that is True if the form was validated and there are no errors\n[/define]\n\n[/definitions]\n\n[h2]Field Objects[/h2]\n\nThe [c]fields[/c] attribute contains a list of field objects. Field objects have the following parameters:\n\n[definitions]\n\n[define errors]\n    A list of errors associated with the field, if any\n[/define]\n\n[define help]\n    Helo text associated with the field\n[/define]\n\n[define inlinehelp]\n    A short help message associated with the field\n[/define]\n\n\n[define name]\n    The name of the field (from the [c]name[/c] attribute of a field tag such as [tag]input[/tag])\n[/define]\n\n[define label]\n    The field's *label* to be rendered in the list of fields\n[/define]\n\n[define value]\n    The value of the field\n[/define]\n\n[define visible]\n    A boolean that indicates if the field should be visible, if [c]False[/c] the field should not be rendered\n[/define]\n\n[/definitions]\n\n\n\n\n[h1]Field Reference[/h1]\n\nThe following is a list of field tags which you can enter in a form.\n\n[h2]check-select[/h2]\n\nA check select fields is simlar to an HTML select control with the [c]multiple[/c] attribute set. Such multiple select controls allow the user to select any number of options by holding down the Alt key. They suffer from a usability point of view in that it is not obvious (without additional text) that you can select multiple options. It is also way to easy to de-select a number of items by forgetting to hold down the Alt key. Moya offers an alternative to a multiple selected with the [tag forms]check-select[/tag] control which renders multiple options as check-boxes -- but otherwise operates in the same way as a select.\n\n[h2]checkbox[/h2]\n\nThe [tag forms]checkbox[/tag] tag renders an input with type checkbox, which displays an icon that may be checked or unchecked. You can tell Moya what value a checkbox should set on the form data when selected with the [c]on[/c] attribute.\n\n[h2]hidden-input[/h2]\n\nThe [tag forms]hidden-input[/tag] tag renders an input with type [c]hidden[/c]. A [i]hidden[/i] input does not visibly display anything in the form, but can be used to associate information with the form that is sent back to the server when submitted.\n\n[alert]Note that hidden inputs may be validated in the same way as other inputs, but if there are errors when validating the field, they can not be displayed since the input is hidden.[/alert]\n\n[h2]input[/h2]\n\nThe [tag forms]input[/tag] tag renders a simple HTML [c]input[/c].\n\n[h2]password[/h2]\n\nThe [tag forms]password[/tag] tag renders an HTML input of type [c]password[/c], which will hide what the users has entered with asterisks.\n\n[h2]radio[/h2]\n\nThe [tag forms]radio[/tag] rag renders an HTML [i]radio button[/i], which may be selected or not-selected. Radio buttons differ from check-boxes in that only one radio button in a [i]group[/i] may be selected. A group is defined by using the same [c]name[/c] for the [tag forms]radio[/tag] tags in the group. For example, the following code creates three radio buttons:\n\n[tag xml]\n<radio name=\"option\" text=\"Option 1\" on=\"1\"/>\n<radio name=\"option\" text=\"Option 2\" on=\"2\"/>\n<radio name=\"option\" text=\"Option 3\" on=\"3\"/>\n[/tag]\n\nIf the user selects a different radio button, the previously selected button will be de-selected. The value [c]option[/c] in the form data will be set to the [c]on[/c] attribute of the selected radio button.\n\n[aside]The [tag forms]radio-group[/tag] tag (see below) may be used to render a more visually distinct group.[/aside]\n\n[h2]radio-group[/h2]\n\nThe [tag forms]radio-group[/tag] renders a group of radio buttons in a single field group in the form. Without a [tag forms]radio-group[/tag], each radio button will have it's own label and have the same margin / padding as other fields. Here's an example of a radio group:\n\n[code xml]\n<radio-group name=\"option\" label=\"Radio Group\" required=\"yes\">\n    <radio text=\"Option 1\" on=\"1\"/>\n    <radio text=\"Option 2\" on=\"2\"/>\n    <radio text=\"Option 3\" on=\"3\"/>\n</radio-group>\n[/code]\n\nNote, that when using a radio group, you need only set the [c]name[/c] of the group, the [c]name[/c] attribute of the [tag forms]radio[/tag] tags will be ignored inside a group.\n\n[h2]select[/h2]\n\nThe [tag forms]select[/tag] tag renders an HTML select control, which is a list of possible values that my be selected by the user. The values used in a select are set with [tag forms]option[/tag] tags which appear inside the [tag forms]select[/tag]. Here's an example of a select control with three possible values:\n\n[code xml]\n<select name=\"fruit\" label=\"Pick a fruit\">\n    <option value=\"apples\">Apples</option>\n    <option value=\"oranges\">Oranges</option>\n    <option value=\"pears\">Pears</option>\n</select>\n[/code]\n\nThe text enclosed in the [tag forms]option[/tag] tag is what is shown to the user. The [c]value[/c] attribute defines the value which will be set on the form data.\n\n[h3]Option Groups[/h3]\n\nOptions in a [tag forms]select[/tag] may be organized in to distinct groups to make them easier to search for with the [tag forms]opt-group[/tag] tag. Here's an example:\n\n[code xml]\n<select name=\"fruit_or_veg\" label=\"Pick something\">\n    <opt-group label=\"Fruit\">\n        <option value=\"apples\">Apples</option>\n        <option value=\"oranges\">Oranges</option>\n        <option value=\"pears\">Pears</option>\n    </opt-group>\n    <opt-group label=\"Vegetable\">\n        <option value=\"carrot\">Carrot</option>\n        <option value=\"potato\">Potato</option>\n    </opt-group>\n</select>\n[/code]\n\nThe code above defines two opt-groups; one for the fruit and one for vegetables under an appropriate heading.\n\n[aside]Although option groups are a standard feature of HTML, there is surprisingly little consistency amongst browsers in how option groups are displayed.[/aside]\n\n[h2]submit-button[/h2]\n\nThe [tag forms]submit-button[/tag] tag renders a button that will submit the form. The [c]text[/c] attribute sets the text to be displayed on the button. This should be something that reflects what will happen when you click the button; 'Edit', 'Create' etc.\n\nSubmit buttons can also set a value on the form when they are clicked; if you supply a [c]name[/c] attribute then clicking the button will store the value given in the [c]value[/c] attribute (which may be empty).\n\n[h3]Form Actions[/h3]\n\nIf you have more than one submit button, you can enclose them in a [tag forms]submit-button[/tag] tag which will render the buttons horizontally rather than one per row. Here's an example:\n\n[code xml]\n<actions>\n    <button name=\"action\" value=\"edit\" text=\"Edit Post\"/>\n    <button name=\"action value=\"cancel> text=\"Cancel\"/>\n</actions>\n[/code]\n\nThis will render two submit buttons. The first one will set the value [c]action[/c] to [c]'edit'[/c], the second will set [c]action[/c] to [c]'cancel'[/c]. The buttons will be displayed on a single row, which looks more natural than a button per row.\n\n[aside]This tag is purely visual, and won't change the behavior of the form.[/aside]\n\n[h2]text-area[/h2]\n\nThe [tag forms]text-area[/tag] tag renders an HTML textarea, which is a multiple-line text input control. Text areas are better suited for situations where the user is required to enter several lines of text, such as in comments or post content.\n\n[h2]upload[/h2]\n\nThe [tag forms]upload[/tag] tag renders a control to upload a file. This is typically rendered by browsers with a button that opens a dialog for the user to select a file to upload.",
        "name": "forms",
        "docmap": [
            [
                1,
                "Installation"
            ],
            [
                2,
                "Test Forms"
            ],
            [
                2,
                "Form Namespace"
            ],
            [
                1,
                "Designing Forms"
            ],
            [
                2,
                "Extending"
            ],
            [
                1,
                "Working with Forms"
            ],
            [
                2,
                "Form Parameters"
            ],
            [
                1,
                "Rendering Forms"
            ],
            [
                2,
                "Form Styles"
            ],
            [
                2,
                "Form Templates"
            ],
            [
                2,
                "Custom Styles"
            ],
            [
                2,
                "Manual Rendering"
            ],
            [
                2,
                "Form Content"
            ],
            [
                2,
                "Custom Fields"
            ],
            [
                1,
                "Processing Forms"
            ],
            [
                2,
                "Populating Forms"
            ],
            [
                2,
                "Processing Fields"
            ],
            [
                2,
                "Field Validation"
            ],
            [
                2,
                "Setting Errors"
            ],
            [
                2,
                "Adapting Form Data"
            ],
            [
                2,
                "Applying forms"
            ],
            [
                1,
                "CSRF Protection"
            ],
            [
                2,
                "How it Work"
            ],
            [
                2,
                "Disabling CSRF"
            ],
            [
                2,
                "Manual CSRF check"
            ],
            [
                1,
                "Form Object Reference"
            ],
            [
                2,
                "Form Object"
            ],
            [
                2,
                "Field Objects"
            ],
            [
                1,
                "Field Reference"
            ],
            [
                2,
                "check-select"
            ],
            [
                2,
                "checkbox"
            ],
            [
                2,
                "hidden-input"
            ],
            [
                2,
                "input"
            ],
            [
                2,
                "password"
            ],
            [
                2,
                "radio"
            ],
            [
                2,
                "radio-group"
            ],
            [
                2,
                "select"
            ],
            [
                3,
                "Option Groups"
            ],
            [
                2,
                "submit-button"
            ],
            [
                3,
                "Form Actions"
            ],
            [
                2,
                "text-area"
            ],
            [
                2,
                "upload"
            ]
        ],
        "title": "Moya Forms"
    },
    "id": "doc.forms"
}