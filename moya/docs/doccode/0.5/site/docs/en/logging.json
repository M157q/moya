{
    "name": "logging",
    "doc_namespace": "doc",
    "doc_class": "doc",
    "references": [
        "doc.index"
    ],
    "data": {
        "body": "[title Logging]\n\nA Moya web application can generate a number of log messages, useful for monitoring what your site is doing and diagnosing errors. Moya's logging system is highly configurable and allows you to set which log messages you see and where they are written.\n\n[h1]Introduction[/h1]\n\nMoya borrows its logging system from Python's [url https://docs.python.org/2/library/logging.html]logging[/url] library and has much the same capabilities.\n\nLog messages are [i]emited[/i] from various [i]loggers[/i]. A logger has a name which identifies the source of the log messages. Moya uses the name [c]moya[/c] for its log messages. Loggers are further categorized with a dot. The following lists the loggers used by Moya:\n\n[definitions]\n\n[define moya.app.APP]\nLogs messages written by applications; APP is replaced with the name of the application. For example [c]moya.app.auth[/c] would be the name used for log messages written by the application named \"auth\".\n[/define]\n\n[define moya.cache]\nLog messages written by the cache system when cache debug is enabled.\n[/define]\n\n[define moya.email]\nLog messages written regarding the sending of emails.\n[/define]\n\n[define moya.jsonrpc]\nLog messages regarding remote procedure calls.\n[/define]\n\n[define moya.request]\nLogs information about each request.\n[/define]\n\n[define moya.runtime]\nLogs information about events that occur during normal operation.\n[/define]\n\n[define moya.signal]\nLog messages regarding signals.\n[/define]\n\n[define moya.startup]\nMessages regarding the startup process, such as the importing and installing of libraries.\n[/define]\n\n[/definitions]\n\nEach log messages has a log [i]level[/i], which defines the [i]severity[/i] of the log message. Log messages may be filtered based on the log level, so you only see the type of message you are interested in. The log levels are as follows:\n\n[definitions]\n\n[define debug]\nInformation to help you track down errors, which you probably don't want in production.\n[/define]\n\n[define info]\nGeneral information about normal operation of the server.\n[/define]\n\n[define warning]\nA [i]potential[/i] problem was detected.\n[/define]\n\n[define error]\nThe server was unable to perform as requested.\n[/define]\n\n[define fatal]\nA serious issue with potential data loss was detected.\n[/define]\n\n[/definitions]\n\n[h1]Log Tags[/h1]\n\nYou can write log messages of your own with the [tag]log[/tag] tag. The message goes in the enclosed text. Here's an example:\n\n[code xml]\n<log>Your log messages goes here</log>\n[/code]\n\nYou may set the logging level with the [c]level[/c] attribute. For example:\n\n[code xml]\n<log level=\"debug\">1s and 0s</log>\n<log level=\"info\">Thought you might want to know</log>\n<log level=\"error\">I've made a terrible mistake</log>\n[/code]\n\nFor each of the logging levels there is a log tag that write logs just that level. For instance, [tag]log-debug[/tag] writes a debug log and [tag]log-warn[/tag] writes a warning log. These level specific log tags are identical to [tag]log[/tag] in all other respects.\n\n[h1]Configuration[/h1]\n\nThe logging system may be configured via an INI file, which allows you to set which messages are to be filtered, and where they should will be written (e.g. to the console or to a file).\n\nThe development server uses logging configuration taken from a file called [c]logging.ini[/c] which is set up to write all message to the console. In production, Moya uses the file [c]prodlogging.ini[/c] which shows only messages with level [b]info[/b] or higher.\n\nYou can change which logging configuration file is used in the development server with the [c]--logging[/c] switch. This is useful for checking your production logging settings. For example:\n\n[code]\n$ moya --logging prodlogging.ini runserver\n[/code]\n\nThe logging configuration file used in production is set in the WSGI file (see [doc deploy]). The default [c]prodlogging.ini[/c] writes log messages with a level of INFO or higher to [url http://en.wikipedia.org/wiki/Syslog]syslog[/url]. Note that the syslog configuration assumes the defaults for most Linux Distros, if you are running on OSX or Windows, you will need enable the configuration for your platform which will be commented out in [c]prodlogging.ini[/c].\n\nMoya's logging INI format is similar to the [url https://docs.python.org/2/library/logging.config.html#configuration-file-format]configuration format[/url] used by Python's logging module, but is more consistent with Moya's other INI files  (and somewhat less prone to errors).\n\n[h2]Loggers[/h2]\n\nYou can configure a logger with a named section as follows:\n\n[code ini]\n[logger:moya]\nlevel = DEBUG\n[/code]\n\nThis sets a level of DEBUG on the [c]moya[/c] logger, which ensures that all log messages are written.\n\nNote that when a log message is written, the logging system looks for all handlers in the hierarchy defined with the dotted notation. For example if the [c]moya.app.auth[/c] logger emits a message, it will be written to [c]moya.app.auth[/c], [c]moya.app[/c], [c]moya[/c], and finally a special logger called [c]root[/c]. If you don't want this behavior, you can set [c]propagate=no[/c] on the logger, to stop writing to the loggers further up the chain.\n\n[alert]If you find your log messages are being written twice, it is likely because they are being propagated up the hierarchy. You will probably want to disable propagation on most specific handler (most dots).[/alert]\n\n[h2]Formatters[/h2]\n\nA formatter sets how a log message is formatted. Here's the default formatter that writes the log message along with the date and level:\n\n[code ini]\n[formatter:simple]\nformat = %(asctime)s:%(name)s:%(levelname)s: %(message)s\ndatefmt = [%d/%b/%Y %H:%M:%S]\n[/code]\n\n[h2]Handlers[/h2]\n\nA handler sets the destination for logging messages (file, console, syslog etc). See the [url https://docs.python.org/2/library/logging.config.html#configuration-file-format]Python documentation[/url] for the full details on creating formatters. Otherwise, here are the default handlers used by Moya:\n\n[code ini]\n\n# Writes syntax highlighted log messages to the terminal\n[handler:moyaconsole]\nclass = moya.logtools.MoyaConsoleHandler\nformatter = simple\nargs = (sys.stdout,)\n\n# Writes simple text to the terminal\n[handler:stdout]\nclass = StreamHandler\nformatter = simple\nargs = (sys.stdout,)\n\n# Writes to a syslog server\n[handler:syslog]\nclass = logging.handlers.SysLogHandler\nargs = ('/dev/log',)\n\n[/code]\n\nYou can set which handler a logger should use with the [c]handler[/c] key. For example:\n\n[code ini]\n[logger:moya]\nlevel = DEBUG\nhandler = moyaconsole\n[/code]\n\n[alert]Note that without a handler of some kind a logger will not be able to write log messages.[/alert]\n\n[h1]Other Loggers[/h1]\n\nOther loggers not under the [c]moya[/c] namespace may be configured with Moya's logging configuration. The [c]sqlalchemy[/c] logger is of particular interest, as it can log all the SQL queries going to the database. If you add the following to your logging ini, you will see SQL related information in the terminal:\n\n[code ini]\n[logger:sqlalchemy.engine]\nhandlers = moyaconsole\npropagate = no\nlevel = INFO\n[/code]\n\nYou can set the [c]level[/c] to DEBUG to display more details, although the messages there are less useful than the SQL. Set [c]level[/c] to WARN to disable sqlalchemy logs.",
        "name": "logging",
        "docmap": [
            [
                1,
                "Introduction"
            ],
            [
                1,
                "Log Tags"
            ],
            [
                1,
                "Configuration"
            ],
            [
                2,
                "Loggers"
            ],
            [
                2,
                "Formatters"
            ],
            [
                2,
                "Handlers"
            ],
            [
                1,
                "Other Loggers"
            ]
        ],
        "title": "Logging"
    },
    "id": "doc.logging"
}